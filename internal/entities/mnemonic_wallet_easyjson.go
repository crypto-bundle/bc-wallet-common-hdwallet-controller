// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	types "github.com/crypto-bundle/bc-wallet-common-hdwallet-controller/internal/types"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson842a094aDecodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities(in *jlexer.Lexer, out *MnemonicWalletFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wallet":
			(out.Wallet).UnmarshalEasyJSON(in)
		case "sessions":
			if in.IsNull() {
				in.Skip()
				out.Sessions = nil
			} else {
				in.Delim('[')
				if out.Sessions == nil {
					if !in.IsDelim(']') {
						out.Sessions = make([]*MnemonicWalletSession, 0, 8)
					} else {
						out.Sessions = []*MnemonicWalletSession{}
					}
				} else {
					out.Sessions = (out.Sessions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *MnemonicWalletSession
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(MnemonicWalletSession)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Sessions = append(out.Sessions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson842a094aEncodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities(out *jwriter.Writer, in MnemonicWalletFull) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wallet\":"
		out.RawString(prefix[1:])
		(in.Wallet).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"sessions\":"
		out.RawString(prefix)
		if in.Sessions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Sessions {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MnemonicWalletFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson842a094aEncodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MnemonicWalletFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson842a094aEncodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MnemonicWalletFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson842a094aDecodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MnemonicWalletFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson842a094aDecodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities(l, v)
}
func easyjson842a094aDecodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities1(in *jlexer.Lexer, out *MnemonicWallet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "uuid":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UUID).UnmarshalText(data))
			}
		case "mnemonic_hash":
			out.MnemonicHash = string(in.String())
		case "status":
			out.Status = types.MnemonicWalletStatus(in.Uint8())
		case "unload_interval":
			out.UnloadInterval = time.Duration(in.Int64())
		case "vault_encrypted":
			if in.IsNull() {
				in.Skip()
				out.VaultEncrypted = nil
			} else {
				out.VaultEncrypted = in.Bytes()
			}
		case "vault_encrypted_hash":
			out.VaultEncryptedHash = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson842a094aEncodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities1(out *jwriter.Writer, in MnemonicWallet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.RawText((in.UUID).MarshalText())
	}
	{
		const prefix string = ",\"mnemonic_hash\":"
		out.RawString(prefix)
		out.String(string(in.MnemonicHash))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Status))
	}
	{
		const prefix string = ",\"unload_interval\":"
		out.RawString(prefix)
		out.Int64(int64(in.UnloadInterval))
	}
	{
		const prefix string = ",\"vault_encrypted\":"
		out.RawString(prefix)
		out.Base64Bytes(in.VaultEncrypted)
	}
	{
		const prefix string = ",\"vault_encrypted_hash\":"
		out.RawString(prefix)
		out.String(string(in.VaultEncryptedHash))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		if in.UpdatedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UpdatedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MnemonicWallet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson842a094aEncodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MnemonicWallet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson842a094aEncodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MnemonicWallet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson842a094aDecodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MnemonicWallet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson842a094aDecodeGithubComCryptoBundleBcWalletCommonHdwalletControllerInternalEntities1(l, v)
}
