//    MIT License
//
//    Copyright (c) 2022-2024 Aleksei Kotelnikov(gudron2s@gmail.com)
//
//    Permission is hereby granted, free of charge, to any person obtaining a copy
//    of this software and associated documentation files (the "Software"), to deal
//    in the Software without restriction, including without limitation the rights
//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    copies of the Software, and to permit persons to whom the Software is
//    furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included in all
//    copies or substantial portions of the Software.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//    SOFTWARE.

syntax = "proto3";

package manager_api;

option go_package = "github.com/crypto-bundle/bc-wallet-common-hdwallet-controller/pkg/grpc/controller";

import "common.proto";
import "google/protobuf/any.proto";

enum WalletStatus{
  WALLET_STATUS_PLACEHOLDER = 0;
  WALLET_STATUS_CREATED = 1;
  WALLET_STATUS_ENABLED = 2;
  WALLET_STATUS_DISABLED = 3;
}

enum WalletSessionStatus{
  WALLET_SESSION_STATUS_PLACEHOLDER = 0;
  WALLET_SESSION_STATUS_PREPARED = 1;
  WALLET_SESSION_STATUS_CLOSED = 2;
}

message AppInstanceIdentity {
  string UUID = 1;
}

message WalletSessionIdentity {
  string SessionUUID = 1;
}

message SignRequestIdentity {
  string UUID = 1;
}

message SignPurposeIdentity {
  string UUID = 1;
}

message SignRequestData {
  enum ReqStatus{
    REQUEST_PLACEHOLDER = 0;
    REQUEST_CREATED = 1;
    REQUEST_PREPARED = 2;
    REQUEST_SIGNED = 3;
    REQUEST_FAILED = 4;
  }

  SignRequestIdentity Identifier = 1;
  ReqStatus Status = 2;
  uint64 CreateAt = 3;
}

message GetEnabledWalletsRequest {
}

message GetEnabledWalletsResponse {
  uint32 WalletsCount = 1;
  repeated common.MnemonicWalletIdentity WalletIdentities = 2;
  map<string, uint32> Bookmarks = 3;
}

message AddNewWalletRequest {
}

message AddNewWalletResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletStatus WalletStatus = 2;
}

message ImportWalletRequest {
  bytes MnemonicPhrase = 1;
}

message ImportWalletResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message EnableWalletRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message EnableWalletResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletStatus WalletStatus = 2;
}

message DisableWalletRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message DisableWalletResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletStatus WalletStatus = 2;
}

message DisableWalletsRequest {
  repeated common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message DisableWalletsResponse {
  repeated common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message EnableWalletsRequest {
  repeated common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message EnableWalletsResponse {
  repeated common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message GetAccountRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
  common.AccountIdentity AccountIdentifier = 3;
}

message GetAccountResponse {
  common.MnemonicWalletIdentity WalletIdentifier= 1;
  WalletSessionIdentity SessionIdentifier = 2;
  common.AccountIdentity AccountIdentifier = 3;
}

message GetMultipleAccountRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
  google.protobuf.Any Parameters = 3;
}

message GetMultipleAccountResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
  uint64 AccountIdentitiesCount = 3;
  repeated common.AccountIdentity AccountIdentifier = 4;
}

message GetWalletInfoRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message GetWalletInfoResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletStatus WalletStatus = 2;
}

message StartWalletSessionRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message StartWalletSessionResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
  WalletSessionStatus SessionStatus = 3;
  uint64 SessionStartedAt = 4;
  uint64 SessionExpiredAt = 5;
}

message GetWalletSessionRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
}

message GetWalletSessionResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  SessionInfo Session = 2;
}

message GetWalletSessionsRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
}

message SessionInfo {
  WalletSessionIdentity SessionIdentifier = 1;
  WalletSessionStatus SessionStatus = 2;
  uint64 SessionStartedAt = 3;
  uint64 SessionExpiredAt = 4;
}

message GetWalletSessionsResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  repeated SessionInfo ActiveSessions = 2;
}

message CloseWalletSessionsRequest {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
}

message CloseWalletSessionsResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
  WalletSessionStatus SessionStatus = 3;
}

message ExecuteSignRequestReq {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  common.AccountIdentity AccountIdentifier = 2;
  WalletSessionIdentity SessionIdentifier = 3;
  SignRequestIdentity SignRequestIdentifier = 4;
  bytes CreatedTxData = 5;
}

message ExecuteSignRequestResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
  common.AccountIdentity AccountIdentifier = 3;
  SignRequestIdentity SignRequestIdentifier = 4;
  bytes SignedTxData = 5;
}

message PrepareSignRequestReq {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  common.AccountIdentity AccountIdentifier = 2;
  WalletSessionIdentity SessionIdentifier = 3;
  SignPurposeIdentity SignPurposeIdentifier = 4;
}

message PrepareSignRequestResponse {
  common.MnemonicWalletIdentity WalletIdentifier = 1;
  WalletSessionIdentity SessionIdentifier = 2;
  common.AccountIdentity AccountIdentifier = 3;
  SignRequestData SignatureRequestInfo = 4;
}

message Event {
  enum Type{
    EVENT_TYPE_PLACEHOLDER = 0;
    EVENT_TYPE_SESSION = 1;
    EVENT_TYPE_SIGN_REQUEST = 2;
  }
  Type EventType = 1;
  AppInstanceIdentity AppInstanceIdentifier = 2;
  bytes Data = 3;
}

message WalletSessionEvent {
  enum Type{
    PLACEHOLDER = 0;
    STARTED = 1;
    CLOSED = 2;
  }
  Type EventType = 1;
  common.MnemonicWalletIdentity WalletIdentifier = 2;
  WalletSessionIdentity SessionIdentifier = 3;
}

message SignRequestEvent {
  enum Type{
    PLACEHOLDER = 0;
    PREPARED = 1;
    CLOSED = 2;
  }
  Type EventType = 1;
  SignRequestIdentity SignRequestIdentifier = 2;
}

service HdWalletControllerApi {
  rpc AddNewWallet                      (AddNewWalletRequest)                returns (AddNewWalletResponse) {}
  rpc ImportWallet                      (ImportWalletRequest)                returns (ImportWalletResponse) {}
  rpc EnableWallet                      (EnableWalletRequest)                returns (EnableWalletResponse) {}
  rpc GetWalletInfo                 (GetWalletInfoRequest)           returns (GetWalletInfoResponse) {}
  rpc GetEnabledWallets                 (GetEnabledWalletsRequest)           returns (GetEnabledWalletsResponse) {}
  rpc DisableWallet                      (DisableWalletRequest)                returns (DisableWalletResponse) {}
  rpc DisableWallets                      (DisableWalletsRequest)                returns (DisableWalletsResponse) {}
  rpc EnableWallets                      (EnableWalletsRequest)                returns (EnableWalletsResponse) {}

  rpc StartWalletSession                (StartWalletSessionRequest)    returns (StartWalletSessionResponse) {}
  rpc GetWalletSession                  (GetWalletSessionRequest)   returns (GetWalletSessionResponse) {}
  rpc GetAllWalletSessions                  (GetWalletSessionsRequest)   returns (GetWalletSessionsResponse) {}
  rpc CloseWalletSession                  (CloseWalletSessionsRequest)   returns (CloseWalletSessionsResponse) {}

  rpc GetAccount                (GetAccountRequest)           returns (GetAccountResponse) {}
  rpc GetMultipleAccounts       (GetMultipleAccountRequest)    returns (GetMultipleAccountResponse) {}

  rpc PrepareSignRequest                   (PrepareSignRequestReq)    returns (PrepareSignRequestResponse) {}
  rpc ExecuteSignRequest                   (ExecuteSignRequestReq)    returns (ExecuteSignRequestResponse) {}
}