// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HdWalletManagerApiClient is the client API for HdWalletManagerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HdWalletManagerApiClient interface {
	AddNewWallet(ctx context.Context, in *AddNewWalletRequest, opts ...grpc.CallOption) (*AddNewWalletResponse, error)
	ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*ImportWalletResponse, error)
	EnableWallet(ctx context.Context, in *EnableWalletRequest, opts ...grpc.CallOption) (*EnableWalletResponse, error)
	GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoResponse, error)
	GetEnabledWallets(ctx context.Context, in *GetEnabledWalletsRequest, opts ...grpc.CallOption) (*GetEnabledWalletsResponse, error)
	DisableWallet(ctx context.Context, in *DisableWalletRequest, opts ...grpc.CallOption) (*DisableWalletResponse, error)
	DisableWallets(ctx context.Context, in *DisableWalletsRequest, opts ...grpc.CallOption) (*DisableWalletsResponse, error)
	StartWalletSession(ctx context.Context, in *StartWalletSessionRequest, opts ...grpc.CallOption) (*StartWalletSessionResponse, error)
	GetWalletSession(ctx context.Context, in *GetWalletSessionRequest, opts ...grpc.CallOption) (*GetWalletSessionResponse, error)
	GetAllWalletSessions(ctx context.Context, in *GetWalletSessionsRequest, opts ...grpc.CallOption) (*GetWalletSessionsResponse, error)
	CloseWalletSession(ctx context.Context, in *CloseWalletSessionsRequest, opts ...grpc.CallOption) (*CloseWalletSessionsResponse, error)
	GetDerivationAddress(ctx context.Context, in *DerivationAddressRequest, opts ...grpc.CallOption) (*DerivationAddressResponse, error)
	GetDerivationAddressByRange(ctx context.Context, in *DerivationAddressByRangeRequest, opts ...grpc.CallOption) (*DerivationAddressByRangeResponse, error)
	PrepareSign(ctx context.Context, in *PrepareSignRequest, opts ...grpc.CallOption) (*PrepareSignResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
}

type hdWalletManagerApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHdWalletManagerApiClient(cc grpc.ClientConnInterface) HdWalletManagerApiClient {
	return &hdWalletManagerApiClient{cc}
}

func (c *hdWalletManagerApiClient) AddNewWallet(ctx context.Context, in *AddNewWalletRequest, opts ...grpc.CallOption) (*AddNewWalletResponse, error) {
	out := new(AddNewWalletResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/AddNewWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*ImportWalletResponse, error) {
	out := new(ImportWalletResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/ImportWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) EnableWallet(ctx context.Context, in *EnableWalletRequest, opts ...grpc.CallOption) (*EnableWalletResponse, error) {
	out := new(EnableWalletResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/EnableWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoResponse, error) {
	out := new(GetWalletInfoResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/GetWalletInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) GetEnabledWallets(ctx context.Context, in *GetEnabledWalletsRequest, opts ...grpc.CallOption) (*GetEnabledWalletsResponse, error) {
	out := new(GetEnabledWalletsResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/GetEnabledWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) DisableWallet(ctx context.Context, in *DisableWalletRequest, opts ...grpc.CallOption) (*DisableWalletResponse, error) {
	out := new(DisableWalletResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/DisableWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) DisableWallets(ctx context.Context, in *DisableWalletsRequest, opts ...grpc.CallOption) (*DisableWalletsResponse, error) {
	out := new(DisableWalletsResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/DisableWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) StartWalletSession(ctx context.Context, in *StartWalletSessionRequest, opts ...grpc.CallOption) (*StartWalletSessionResponse, error) {
	out := new(StartWalletSessionResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/StartWalletSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) GetWalletSession(ctx context.Context, in *GetWalletSessionRequest, opts ...grpc.CallOption) (*GetWalletSessionResponse, error) {
	out := new(GetWalletSessionResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/GetWalletSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) GetAllWalletSessions(ctx context.Context, in *GetWalletSessionsRequest, opts ...grpc.CallOption) (*GetWalletSessionsResponse, error) {
	out := new(GetWalletSessionsResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/GetAllWalletSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) CloseWalletSession(ctx context.Context, in *CloseWalletSessionsRequest, opts ...grpc.CallOption) (*CloseWalletSessionsResponse, error) {
	out := new(CloseWalletSessionsResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/CloseWalletSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) GetDerivationAddress(ctx context.Context, in *DerivationAddressRequest, opts ...grpc.CallOption) (*DerivationAddressResponse, error) {
	out := new(DerivationAddressResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/GetDerivationAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) GetDerivationAddressByRange(ctx context.Context, in *DerivationAddressByRangeRequest, opts ...grpc.CallOption) (*DerivationAddressByRangeResponse, error) {
	out := new(DerivationAddressByRangeResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/GetDerivationAddressByRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) PrepareSign(ctx context.Context, in *PrepareSignRequest, opts ...grpc.CallOption) (*PrepareSignResponse, error) {
	out := new(PrepareSignResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/PrepareSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdWalletManagerApiClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := c.cc.Invoke(ctx, "/manager_api.HdWalletManagerApi/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HdWalletManagerApiServer is the server API for HdWalletManagerApi service.
// All implementations must embed UnimplementedHdWalletManagerApiServer
// for forward compatibility
type HdWalletManagerApiServer interface {
	AddNewWallet(context.Context, *AddNewWalletRequest) (*AddNewWalletResponse, error)
	ImportWallet(context.Context, *ImportWalletRequest) (*ImportWalletResponse, error)
	EnableWallet(context.Context, *EnableWalletRequest) (*EnableWalletResponse, error)
	GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoResponse, error)
	GetEnabledWallets(context.Context, *GetEnabledWalletsRequest) (*GetEnabledWalletsResponse, error)
	DisableWallet(context.Context, *DisableWalletRequest) (*DisableWalletResponse, error)
	DisableWallets(context.Context, *DisableWalletsRequest) (*DisableWalletsResponse, error)
	StartWalletSession(context.Context, *StartWalletSessionRequest) (*StartWalletSessionResponse, error)
	GetWalletSession(context.Context, *GetWalletSessionRequest) (*GetWalletSessionResponse, error)
	GetAllWalletSessions(context.Context, *GetWalletSessionsRequest) (*GetWalletSessionsResponse, error)
	CloseWalletSession(context.Context, *CloseWalletSessionsRequest) (*CloseWalletSessionsResponse, error)
	GetDerivationAddress(context.Context, *DerivationAddressRequest) (*DerivationAddressResponse, error)
	GetDerivationAddressByRange(context.Context, *DerivationAddressByRangeRequest) (*DerivationAddressByRangeResponse, error)
	PrepareSign(context.Context, *PrepareSignRequest) (*PrepareSignResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
	mustEmbedUnimplementedHdWalletManagerApiServer()
}

// UnimplementedHdWalletManagerApiServer must be embedded to have forward compatible implementations.
type UnimplementedHdWalletManagerApiServer struct {
}

func (UnimplementedHdWalletManagerApiServer) AddNewWallet(context.Context, *AddNewWalletRequest) (*AddNewWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewWallet not implemented")
}
func (UnimplementedHdWalletManagerApiServer) ImportWallet(context.Context, *ImportWalletRequest) (*ImportWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWallet not implemented")
}
func (UnimplementedHdWalletManagerApiServer) EnableWallet(context.Context, *EnableWalletRequest) (*EnableWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableWallet not implemented")
}
func (UnimplementedHdWalletManagerApiServer) GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInfo not implemented")
}
func (UnimplementedHdWalletManagerApiServer) GetEnabledWallets(context.Context, *GetEnabledWalletsRequest) (*GetEnabledWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnabledWallets not implemented")
}
func (UnimplementedHdWalletManagerApiServer) DisableWallet(context.Context, *DisableWalletRequest) (*DisableWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableWallet not implemented")
}
func (UnimplementedHdWalletManagerApiServer) DisableWallets(context.Context, *DisableWalletsRequest) (*DisableWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableWallets not implemented")
}
func (UnimplementedHdWalletManagerApiServer) StartWalletSession(context.Context, *StartWalletSessionRequest) (*StartWalletSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWalletSession not implemented")
}
func (UnimplementedHdWalletManagerApiServer) GetWalletSession(context.Context, *GetWalletSessionRequest) (*GetWalletSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletSession not implemented")
}
func (UnimplementedHdWalletManagerApiServer) GetAllWalletSessions(context.Context, *GetWalletSessionsRequest) (*GetWalletSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWalletSessions not implemented")
}
func (UnimplementedHdWalletManagerApiServer) CloseWalletSession(context.Context, *CloseWalletSessionsRequest) (*CloseWalletSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseWalletSession not implemented")
}
func (UnimplementedHdWalletManagerApiServer) GetDerivationAddress(context.Context, *DerivationAddressRequest) (*DerivationAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDerivationAddress not implemented")
}
func (UnimplementedHdWalletManagerApiServer) GetDerivationAddressByRange(context.Context, *DerivationAddressByRangeRequest) (*DerivationAddressByRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDerivationAddressByRange not implemented")
}
func (UnimplementedHdWalletManagerApiServer) PrepareSign(context.Context, *PrepareSignRequest) (*PrepareSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSign not implemented")
}
func (UnimplementedHdWalletManagerApiServer) SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}
func (UnimplementedHdWalletManagerApiServer) mustEmbedUnimplementedHdWalletManagerApiServer() {}

// UnsafeHdWalletManagerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HdWalletManagerApiServer will
// result in compilation errors.
type UnsafeHdWalletManagerApiServer interface {
	mustEmbedUnimplementedHdWalletManagerApiServer()
}

func RegisterHdWalletManagerApiServer(s grpc.ServiceRegistrar, srv HdWalletManagerApiServer) {
	s.RegisterService(&HdWalletManagerApi_ServiceDesc, srv)
}

func _HdWalletManagerApi_AddNewWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).AddNewWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/AddNewWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).AddNewWallet(ctx, req.(*AddNewWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_ImportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).ImportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/ImportWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).ImportWallet(ctx, req.(*ImportWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_EnableWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).EnableWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/EnableWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).EnableWallet(ctx, req.(*EnableWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/GetWalletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).GetWalletInfo(ctx, req.(*GetWalletInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_GetEnabledWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnabledWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).GetEnabledWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/GetEnabledWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).GetEnabledWallets(ctx, req.(*GetEnabledWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_DisableWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).DisableWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/DisableWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).DisableWallet(ctx, req.(*DisableWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_DisableWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).DisableWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/DisableWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).DisableWallets(ctx, req.(*DisableWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_StartWalletSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWalletSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).StartWalletSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/StartWalletSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).StartWalletSession(ctx, req.(*StartWalletSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_GetWalletSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).GetWalletSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/GetWalletSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).GetWalletSession(ctx, req.(*GetWalletSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_GetAllWalletSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).GetAllWalletSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/GetAllWalletSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).GetAllWalletSessions(ctx, req.(*GetWalletSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_CloseWalletSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseWalletSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).CloseWalletSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/CloseWalletSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).CloseWalletSession(ctx, req.(*CloseWalletSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_GetDerivationAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DerivationAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).GetDerivationAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/GetDerivationAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).GetDerivationAddress(ctx, req.(*DerivationAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_GetDerivationAddressByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DerivationAddressByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).GetDerivationAddressByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/GetDerivationAddressByRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).GetDerivationAddressByRange(ctx, req.(*DerivationAddressByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_PrepareSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).PrepareSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/PrepareSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).PrepareSign(ctx, req.(*PrepareSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdWalletManagerApi_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdWalletManagerApiServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager_api.HdWalletManagerApi/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdWalletManagerApiServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HdWalletManagerApi_ServiceDesc is the grpc.ServiceDesc for HdWalletManagerApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HdWalletManagerApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manager_api.HdWalletManagerApi",
	HandlerType: (*HdWalletManagerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewWallet",
			Handler:    _HdWalletManagerApi_AddNewWallet_Handler,
		},
		{
			MethodName: "ImportWallet",
			Handler:    _HdWalletManagerApi_ImportWallet_Handler,
		},
		{
			MethodName: "EnableWallet",
			Handler:    _HdWalletManagerApi_EnableWallet_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _HdWalletManagerApi_GetWalletInfo_Handler,
		},
		{
			MethodName: "GetEnabledWallets",
			Handler:    _HdWalletManagerApi_GetEnabledWallets_Handler,
		},
		{
			MethodName: "DisableWallet",
			Handler:    _HdWalletManagerApi_DisableWallet_Handler,
		},
		{
			MethodName: "DisableWallets",
			Handler:    _HdWalletManagerApi_DisableWallets_Handler,
		},
		{
			MethodName: "StartWalletSession",
			Handler:    _HdWalletManagerApi_StartWalletSession_Handler,
		},
		{
			MethodName: "GetWalletSession",
			Handler:    _HdWalletManagerApi_GetWalletSession_Handler,
		},
		{
			MethodName: "GetAllWalletSessions",
			Handler:    _HdWalletManagerApi_GetAllWalletSessions_Handler,
		},
		{
			MethodName: "CloseWalletSession",
			Handler:    _HdWalletManagerApi_CloseWalletSession_Handler,
		},
		{
			MethodName: "GetDerivationAddress",
			Handler:    _HdWalletManagerApi_GetDerivationAddress_Handler,
		},
		{
			MethodName: "GetDerivationAddressByRange",
			Handler:    _HdWalletManagerApi_GetDerivationAddressByRange_Handler,
		},
		{
			MethodName: "PrepareSign",
			Handler:    _HdWalletManagerApi_PrepareSign_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _HdWalletManagerApi_SignTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager_api.proto",
}
