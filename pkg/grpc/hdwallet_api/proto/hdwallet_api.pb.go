// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.2
// source: hdwallet_api.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WalletMakerStrategy int32

const (
	WalletMakerStrategy_PLACEHOLDER_STRATEGY_TYPE       WalletMakerStrategy = 0
	WalletMakerStrategy_SINGLE_MNEMONIC_STRATEGY_TYPE   WalletMakerStrategy = 1
	WalletMakerStrategy_MULTIPLE_MNEMONIC_STRATEGY_TYPE WalletMakerStrategy = 2
)

// Enum value maps for WalletMakerStrategy.
var (
	WalletMakerStrategy_name = map[int32]string{
		0: "PLACEHOLDER_STRATEGY_TYPE",
		1: "SINGLE_MNEMONIC_STRATEGY_TYPE",
		2: "MULTIPLE_MNEMONIC_STRATEGY_TYPE",
	}
	WalletMakerStrategy_value = map[string]int32{
		"PLACEHOLDER_STRATEGY_TYPE":       0,
		"SINGLE_MNEMONIC_STRATEGY_TYPE":   1,
		"MULTIPLE_MNEMONIC_STRATEGY_TYPE": 2,
	}
)

func (x WalletMakerStrategy) Enum() *WalletMakerStrategy {
	p := new(WalletMakerStrategy)
	*p = x
	return p
}

func (x WalletMakerStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletMakerStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_hdwallet_api_proto_enumTypes[0].Descriptor()
}

func (WalletMakerStrategy) Type() protoreflect.EnumType {
	return &file_hdwallet_api_proto_enumTypes[0]
}

func (x WalletMakerStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletMakerStrategy.Descriptor instead.
func (WalletMakerStrategy) EnumDescriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{0}
}

type DerivationAddressIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIndex  uint32 `protobuf:"varint,1,opt,name=AccountIndex,proto3" json:"AccountIndex,omitempty"`
	InternalIndex uint32 `protobuf:"varint,2,opt,name=InternalIndex,proto3" json:"InternalIndex,omitempty"`
	AddressIndex  uint32 `protobuf:"varint,3,opt,name=AddressIndex,proto3" json:"AddressIndex,omitempty"`
	Address       string `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *DerivationAddressIdentity) Reset() {
	*x = DerivationAddressIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationAddressIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationAddressIdentity) ProtoMessage() {}

func (x *DerivationAddressIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationAddressIdentity.ProtoReflect.Descriptor instead.
func (*DerivationAddressIdentity) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{0}
}

func (x *DerivationAddressIdentity) GetAccountIndex() uint32 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *DerivationAddressIdentity) GetInternalIndex() uint32 {
	if x != nil {
		return x.InternalIndex
	}
	return 0
}

func (x *DerivationAddressIdentity) GetAddressIndex() uint32 {
	if x != nil {
		return x.AddressIndex
	}
	return 0
}

func (x *DerivationAddressIdentity) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetEnabledWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEnabledWalletsRequest) Reset() {
	*x = GetEnabledWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnabledWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnabledWalletsRequest) ProtoMessage() {}

func (x *GetEnabledWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnabledWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetEnabledWalletsRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{1}
}

type MnemonicWalletIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletUUID string `protobuf:"bytes,1,opt,name=WalletUUID,proto3" json:"WalletUUID,omitempty"`
	WalletHash string `protobuf:"bytes,2,opt,name=WalletHash,proto3" json:"WalletHash,omitempty"`
}

func (x *MnemonicWalletIdentity) Reset() {
	*x = MnemonicWalletIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MnemonicWalletIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MnemonicWalletIdentity) ProtoMessage() {}

func (x *MnemonicWalletIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MnemonicWalletIdentity.ProtoReflect.Descriptor instead.
func (*MnemonicWalletIdentity) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{2}
}

func (x *MnemonicWalletIdentity) GetWalletUUID() string {
	if x != nil {
		return x.WalletUUID
	}
	return ""
}

func (x *MnemonicWalletIdentity) GetWalletHash() string {
	if x != nil {
		return x.WalletHash
	}
	return ""
}

type MnemonicWalletData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity *MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=Identity,proto3" json:"Identity,omitempty"`
	IsHot    bool                    `protobuf:"varint,2,opt,name=IsHot,proto3" json:"IsHot,omitempty"`
}

func (x *MnemonicWalletData) Reset() {
	*x = MnemonicWalletData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MnemonicWalletData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MnemonicWalletData) ProtoMessage() {}

func (x *MnemonicWalletData) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MnemonicWalletData.ProtoReflect.Descriptor instead.
func (*MnemonicWalletData) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{3}
}

func (x *MnemonicWalletData) GetIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *MnemonicWalletData) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

type WalletIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletUUID string `protobuf:"bytes,1,opt,name=WalletUUID,proto3" json:"WalletUUID,omitempty"`
}

func (x *WalletIdentity) Reset() {
	*x = WalletIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletIdentity) ProtoMessage() {}

func (x *WalletIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletIdentity.ProtoReflect.Descriptor instead.
func (*WalletIdentity) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{4}
}

func (x *WalletIdentity) GetWalletUUID() string {
	if x != nil {
		return x.WalletUUID
	}
	return ""
}

type WalletBookmarks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HotWalletIndex      uint32   `protobuf:"varint,1,opt,name=HotWalletIndex,proto3" json:"HotWalletIndex,omitempty"`
	NonHotWalletIndexes []uint32 `protobuf:"varint,2,rep,packed,name=NonHotWalletIndexes,proto3" json:"NonHotWalletIndexes,omitempty"`
}

func (x *WalletBookmarks) Reset() {
	*x = WalletBookmarks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletBookmarks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletBookmarks) ProtoMessage() {}

func (x *WalletBookmarks) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletBookmarks.ProtoReflect.Descriptor instead.
func (*WalletBookmarks) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{5}
}

func (x *WalletBookmarks) GetHotWalletIndex() uint32 {
	if x != nil {
		return x.HotWalletIndex
	}
	return 0
}

func (x *WalletBookmarks) GetNonHotWalletIndexes() []uint32 {
	if x != nil {
		return x.NonHotWalletIndexes
	}
	return nil
}

type WalletData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity            *WalletIdentity       `protobuf:"bytes,1,opt,name=Identity,proto3" json:"Identity,omitempty"`
	Title               string                `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Purpose             string                `protobuf:"bytes,3,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	Strategy            WalletMakerStrategy   `protobuf:"varint,4,opt,name=Strategy,proto3,enum=hdwallet_api.WalletMakerStrategy" json:"Strategy,omitempty"`
	MnemonicWalletCount uint32                `protobuf:"varint,5,opt,name=MnemonicWalletCount,proto3" json:"MnemonicWalletCount,omitempty"`
	Bookmarks           *WalletBookmarks      `protobuf:"bytes,6,opt,name=Bookmarks,proto3" json:"Bookmarks,omitempty"`
	MnemonicWallets     []*MnemonicWalletData `protobuf:"bytes,7,rep,name=MnemonicWallets,proto3" json:"MnemonicWallets,omitempty"`
}

func (x *WalletData) Reset() {
	*x = WalletData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletData) ProtoMessage() {}

func (x *WalletData) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletData.ProtoReflect.Descriptor instead.
func (*WalletData) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{6}
}

func (x *WalletData) GetIdentity() *WalletIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *WalletData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WalletData) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *WalletData) GetStrategy() WalletMakerStrategy {
	if x != nil {
		return x.Strategy
	}
	return WalletMakerStrategy_PLACEHOLDER_STRATEGY_TYPE
}

func (x *WalletData) GetMnemonicWalletCount() uint32 {
	if x != nil {
		return x.MnemonicWalletCount
	}
	return 0
}

func (x *WalletData) GetBookmarks() *WalletBookmarks {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

func (x *WalletData) GetMnemonicWallets() []*MnemonicWalletData {
	if x != nil {
		return x.MnemonicWallets
	}
	return nil
}

type GetEnabledWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletsCount uint32        `protobuf:"varint,1,opt,name=WalletsCount,proto3" json:"WalletsCount,omitempty"`
	Wallets      []*WalletData `protobuf:"bytes,2,rep,name=Wallets,proto3" json:"Wallets,omitempty"`
}

func (x *GetEnabledWalletsResponse) Reset() {
	*x = GetEnabledWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnabledWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnabledWalletsResponse) ProtoMessage() {}

func (x *GetEnabledWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnabledWalletsResponse.ProtoReflect.Descriptor instead.
func (*GetEnabledWalletsResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{7}
}

func (x *GetEnabledWalletsResponse) GetWalletsCount() uint32 {
	if x != nil {
		return x.WalletsCount
	}
	return 0
}

func (x *GetEnabledWalletsResponse) GetWallets() []*WalletData {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type AddNewWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string              `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Purpose  string              `protobuf:"bytes,2,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	Strategy WalletMakerStrategy `protobuf:"varint,3,opt,name=Strategy,proto3,enum=hdwallet_api.WalletMakerStrategy" json:"Strategy,omitempty"`
}

func (x *AddNewWalletRequest) Reset() {
	*x = AddNewWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewWalletRequest) ProtoMessage() {}

func (x *AddNewWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewWalletRequest.ProtoReflect.Descriptor instead.
func (*AddNewWalletRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{8}
}

func (x *AddNewWalletRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddNewWalletRequest) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *AddNewWalletRequest) GetStrategy() WalletMakerStrategy {
	if x != nil {
		return x.Strategy
	}
	return WalletMakerStrategy_PLACEHOLDER_STRATEGY_TYPE
}

type AddNewWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallet *WalletData `protobuf:"bytes,1,opt,name=Wallet,proto3" json:"Wallet,omitempty"`
}

func (x *AddNewWalletResponse) Reset() {
	*x = AddNewWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewWalletResponse) ProtoMessage() {}

func (x *AddNewWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewWalletResponse.ProtoReflect.Descriptor instead.
func (*AddNewWalletResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{9}
}

func (x *AddNewWalletResponse) GetWallet() *WalletData {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type DerivationAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity   *WalletIdentity            `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
	MnemonicIdentity *MnemonicWalletIdentity    `protobuf:"bytes,2,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
	SessionIdentity  *WalletSessionIdentity     `protobuf:"bytes,3,opt,name=SessionIdentity,proto3" json:"SessionIdentity,omitempty"`
	AddressIdentity  *DerivationAddressIdentity `protobuf:"bytes,4,opt,name=AddressIdentity,proto3" json:"AddressIdentity,omitempty"`
}

func (x *DerivationAddressRequest) Reset() {
	*x = DerivationAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationAddressRequest) ProtoMessage() {}

func (x *DerivationAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationAddressRequest.ProtoReflect.Descriptor instead.
func (*DerivationAddressRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{10}
}

func (x *DerivationAddressRequest) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

func (x *DerivationAddressRequest) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

func (x *DerivationAddressRequest) GetSessionIdentity() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentity
	}
	return nil
}

func (x *DerivationAddressRequest) GetAddressIdentity() *DerivationAddressIdentity {
	if x != nil {
		return x.AddressIdentity
	}
	return nil
}

type DerivationAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity   *WalletIdentity            `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
	MnemonicIdentity *MnemonicWalletIdentity    `protobuf:"bytes,2,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
	SessionIdentity  *WalletSessionIdentity     `protobuf:"bytes,3,opt,name=SessionIdentity,proto3" json:"SessionIdentity,omitempty"`
	AddressIdentity  *DerivationAddressIdentity `protobuf:"bytes,4,opt,name=AddressIdentity,proto3" json:"AddressIdentity,omitempty"`
}

func (x *DerivationAddressResponse) Reset() {
	*x = DerivationAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationAddressResponse) ProtoMessage() {}

func (x *DerivationAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationAddressResponse.ProtoReflect.Descriptor instead.
func (*DerivationAddressResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{11}
}

func (x *DerivationAddressResponse) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

func (x *DerivationAddressResponse) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

func (x *DerivationAddressResponse) GetSessionIdentity() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentity
	}
	return nil
}

func (x *DerivationAddressResponse) GetAddressIdentity() *DerivationAddressIdentity {
	if x != nil {
		return x.AddressIdentity
	}
	return nil
}

type RangeRequestUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIndex     uint32 `protobuf:"varint,3,opt,name=AccountIndex,proto3" json:"AccountIndex,omitempty"`
	InternalIndex    uint32 `protobuf:"varint,4,opt,name=InternalIndex,proto3" json:"InternalIndex,omitempty"`
	AddressIndexFrom uint32 `protobuf:"varint,5,opt,name=AddressIndexFrom,proto3" json:"AddressIndexFrom,omitempty"`
	AddressIndexTo   uint32 `protobuf:"varint,6,opt,name=AddressIndexTo,proto3" json:"AddressIndexTo,omitempty"`
}

func (x *RangeRequestUnit) Reset() {
	*x = RangeRequestUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeRequestUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeRequestUnit) ProtoMessage() {}

func (x *RangeRequestUnit) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeRequestUnit.ProtoReflect.Descriptor instead.
func (*RangeRequestUnit) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{12}
}

func (x *RangeRequestUnit) GetAccountIndex() uint32 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *RangeRequestUnit) GetInternalIndex() uint32 {
	if x != nil {
		return x.InternalIndex
	}
	return 0
}

func (x *RangeRequestUnit) GetAddressIndexFrom() uint32 {
	if x != nil {
		return x.AddressIndexFrom
	}
	return 0
}

func (x *RangeRequestUnit) GetAddressIndexTo() uint32 {
	if x != nil {
		return x.AddressIndexTo
	}
	return 0
}

type DerivationAddressByRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity   *WalletIdentity         `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
	MnemonicIdentity *MnemonicWalletIdentity `protobuf:"bytes,2,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
	Ranges           []*RangeRequestUnit     `protobuf:"bytes,3,rep,name=Ranges,proto3" json:"Ranges,omitempty"`
}

func (x *DerivationAddressByRangeRequest) Reset() {
	*x = DerivationAddressByRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationAddressByRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationAddressByRangeRequest) ProtoMessage() {}

func (x *DerivationAddressByRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationAddressByRangeRequest.ProtoReflect.Descriptor instead.
func (*DerivationAddressByRangeRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{13}
}

func (x *DerivationAddressByRangeRequest) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

func (x *DerivationAddressByRangeRequest) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

func (x *DerivationAddressByRangeRequest) GetRanges() []*RangeRequestUnit {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type DerivationAddressByRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity         *WalletIdentity              `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
	MnemonicIdentity       *MnemonicWalletIdentity      `protobuf:"bytes,2,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
	AddressIdentitiesCount uint64                       `protobuf:"varint,3,opt,name=AddressIdentitiesCount,proto3" json:"AddressIdentitiesCount,omitempty"`
	AddressIdentities      []*DerivationAddressIdentity `protobuf:"bytes,4,rep,name=AddressIdentities,proto3" json:"AddressIdentities,omitempty"`
}

func (x *DerivationAddressByRangeResponse) Reset() {
	*x = DerivationAddressByRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DerivationAddressByRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationAddressByRangeResponse) ProtoMessage() {}

func (x *DerivationAddressByRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationAddressByRangeResponse.ProtoReflect.Descriptor instead.
func (*DerivationAddressByRangeResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{14}
}

func (x *DerivationAddressByRangeResponse) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

func (x *DerivationAddressByRangeResponse) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

func (x *DerivationAddressByRangeResponse) GetAddressIdentitiesCount() uint64 {
	if x != nil {
		return x.AddressIdentitiesCount
	}
	return 0
}

func (x *DerivationAddressByRangeResponse) GetAddressIdentities() []*DerivationAddressIdentity {
	if x != nil {
		return x.AddressIdentities
	}
	return nil
}

type SignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletUUID         string                     `protobuf:"bytes,1,opt,name=WalletUUID,proto3" json:"WalletUUID,omitempty"`
	MnemonicWalletUUID string                     `protobuf:"bytes,2,opt,name=MnemonicWalletUUID,proto3" json:"MnemonicWalletUUID,omitempty"`
	AddressIdentity    *DerivationAddressIdentity `protobuf:"bytes,3,opt,name=AddressIdentity,proto3" json:"AddressIdentity,omitempty"`
	SessionIdentity    *WalletSessionIdentity     `protobuf:"bytes,4,opt,name=SessionIdentity,proto3" json:"SessionIdentity,omitempty"`
	CreatedTxData      []byte                     `protobuf:"bytes,5,opt,name=CreatedTxData,proto3" json:"CreatedTxData,omitempty"`
}

func (x *SignTransactionRequest) Reset() {
	*x = SignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionRequest) ProtoMessage() {}

func (x *SignTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{15}
}

func (x *SignTransactionRequest) GetWalletUUID() string {
	if x != nil {
		return x.WalletUUID
	}
	return ""
}

func (x *SignTransactionRequest) GetMnemonicWalletUUID() string {
	if x != nil {
		return x.MnemonicWalletUUID
	}
	return ""
}

func (x *SignTransactionRequest) GetAddressIdentity() *DerivationAddressIdentity {
	if x != nil {
		return x.AddressIdentity
	}
	return nil
}

func (x *SignTransactionRequest) GetSessionIdentity() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentity
	}
	return nil
}

func (x *SignTransactionRequest) GetCreatedTxData() []byte {
	if x != nil {
		return x.CreatedTxData
	}
	return nil
}

type SignTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity   *WalletIdentity            `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
	MnemonicIdentity *MnemonicWalletIdentity    `protobuf:"bytes,2,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
	SessionIdentity  *WalletSessionIdentity     `protobuf:"bytes,3,opt,name=SessionIdentity,proto3" json:"SessionIdentity,omitempty"`
	TxOwnerIdentity  *DerivationAddressIdentity `protobuf:"bytes,4,opt,name=TxOwnerIdentity,proto3" json:"TxOwnerIdentity,omitempty"`
	SignedTxData     []byte                     `protobuf:"bytes,5,opt,name=SignedTxData,proto3" json:"SignedTxData,omitempty"`
}

func (x *SignTransactionResponse) Reset() {
	*x = SignTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionResponse) ProtoMessage() {}

func (x *SignTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionResponse.ProtoReflect.Descriptor instead.
func (*SignTransactionResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{16}
}

func (x *SignTransactionResponse) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

func (x *SignTransactionResponse) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

func (x *SignTransactionResponse) GetSessionIdentity() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentity
	}
	return nil
}

func (x *SignTransactionResponse) GetTxOwnerIdentity() *DerivationAddressIdentity {
	if x != nil {
		return x.TxOwnerIdentity
	}
	return nil
}

func (x *SignTransactionResponse) GetSignedTxData() []byte {
	if x != nil {
		return x.SignedTxData
	}
	return nil
}

type GetWalletInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity *WalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
}

func (x *GetWalletInfoRequest) Reset() {
	*x = GetWalletInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletInfoRequest) ProtoMessage() {}

func (x *GetWalletInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletInfoRequest.ProtoReflect.Descriptor instead.
func (*GetWalletInfoRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetWalletInfoRequest) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

type GetWalletInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity *WalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
	WalletInfo     *WalletData     `protobuf:"bytes,2,opt,name=WalletInfo,proto3" json:"WalletInfo,omitempty"`
}

func (x *GetWalletInfoResponse) Reset() {
	*x = GetWalletInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletInfoResponse) ProtoMessage() {}

func (x *GetWalletInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletInfoResponse.ProtoReflect.Descriptor instead.
func (*GetWalletInfoResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetWalletInfoResponse) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

func (x *GetWalletInfoResponse) GetWalletInfo() *WalletData {
	if x != nil {
		return x.WalletInfo
	}
	return nil
}

type WalletSessionIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUUID string `protobuf:"bytes,1,opt,name=SessionUUID,proto3" json:"SessionUUID,omitempty"`
}

func (x *WalletSessionIdentity) Reset() {
	*x = WalletSessionIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletSessionIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletSessionIdentity) ProtoMessage() {}

func (x *WalletSessionIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletSessionIdentity.ProtoReflect.Descriptor instead.
func (*WalletSessionIdentity) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{19}
}

func (x *WalletSessionIdentity) GetSessionUUID() string {
	if x != nil {
		return x.SessionUUID
	}
	return ""
}

type StartWalletSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletUUID         string `protobuf:"bytes,1,opt,name=WalletUUID,proto3" json:"WalletUUID,omitempty"`
	MnemonicWalletUUID string `protobuf:"bytes,2,opt,name=MnemonicWalletUUID,proto3" json:"MnemonicWalletUUID,omitempty"`
}

func (x *StartWalletSessionRequest) Reset() {
	*x = StartWalletSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWalletSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWalletSessionRequest) ProtoMessage() {}

func (x *StartWalletSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWalletSessionRequest.ProtoReflect.Descriptor instead.
func (*StartWalletSessionRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{20}
}

func (x *StartWalletSessionRequest) GetWalletUUID() string {
	if x != nil {
		return x.WalletUUID
	}
	return ""
}

func (x *StartWalletSessionRequest) GetMnemonicWalletUUID() string {
	if x != nil {
		return x.MnemonicWalletUUID
	}
	return ""
}

type StartWalletSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity   *WalletIdentity         `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
	MnemonicIdentity *MnemonicWalletIdentity `protobuf:"bytes,2,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
	SessionIdentity  *WalletSessionIdentity  `protobuf:"bytes,3,opt,name=SessionIdentity,proto3" json:"SessionIdentity,omitempty"`
	SessionStartedAt uint64                  `protobuf:"varint,4,opt,name=SessionStartedAt,proto3" json:"SessionStartedAt,omitempty"`
	SessionExpiredAt uint64                  `protobuf:"varint,5,opt,name=SessionExpiredAt,proto3" json:"SessionExpiredAt,omitempty"`
}

func (x *StartWalletSessionResponse) Reset() {
	*x = StartWalletSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWalletSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWalletSessionResponse) ProtoMessage() {}

func (x *StartWalletSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWalletSessionResponse.ProtoReflect.Descriptor instead.
func (*StartWalletSessionResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{21}
}

func (x *StartWalletSessionResponse) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

func (x *StartWalletSessionResponse) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

func (x *StartWalletSessionResponse) GetSessionIdentity() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentity
	}
	return nil
}

func (x *StartWalletSessionResponse) GetSessionStartedAt() uint64 {
	if x != nil {
		return x.SessionStartedAt
	}
	return 0
}

func (x *StartWalletSessionResponse) GetSessionExpiredAt() uint64 {
	if x != nil {
		return x.SessionExpiredAt
	}
	return 0
}

type GetWalletSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletUUID         string `protobuf:"bytes,1,opt,name=WalletUUID,proto3" json:"WalletUUID,omitempty"`
	MnemonicWalletUUID string `protobuf:"bytes,2,opt,name=MnemonicWalletUUID,proto3" json:"MnemonicWalletUUID,omitempty"`
}

func (x *GetWalletSessionRequest) Reset() {
	*x = GetWalletSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletSessionRequest) ProtoMessage() {}

func (x *GetWalletSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletSessionRequest.ProtoReflect.Descriptor instead.
func (*GetWalletSessionRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{22}
}

func (x *GetWalletSessionRequest) GetWalletUUID() string {
	if x != nil {
		return x.WalletUUID
	}
	return ""
}

func (x *GetWalletSessionRequest) GetMnemonicWalletUUID() string {
	if x != nil {
		return x.MnemonicWalletUUID
	}
	return ""
}

type GetWalletSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentity   *WalletIdentity         `protobuf:"bytes,1,opt,name=WalletIdentity,proto3" json:"WalletIdentity,omitempty"`
	MnemonicIdentity *MnemonicWalletIdentity `protobuf:"bytes,2,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
	SessionIdentity  *WalletSessionIdentity  `protobuf:"bytes,3,opt,name=SessionIdentity,proto3" json:"SessionIdentity,omitempty"`
	SessionStartedAt uint64                  `protobuf:"varint,4,opt,name=SessionStartedAt,proto3" json:"SessionStartedAt,omitempty"`
	SessionExpiredAt uint64                  `protobuf:"varint,5,opt,name=SessionExpiredAt,proto3" json:"SessionExpiredAt,omitempty"`
}

func (x *GetWalletSessionResponse) Reset() {
	*x = GetWalletSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletSessionResponse) ProtoMessage() {}

func (x *GetWalletSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletSessionResponse.ProtoReflect.Descriptor instead.
func (*GetWalletSessionResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{23}
}

func (x *GetWalletSessionResponse) GetWalletIdentity() *WalletIdentity {
	if x != nil {
		return x.WalletIdentity
	}
	return nil
}

func (x *GetWalletSessionResponse) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

func (x *GetWalletSessionResponse) GetSessionIdentity() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentity
	}
	return nil
}

func (x *GetWalletSessionResponse) GetSessionStartedAt() uint64 {
	if x != nil {
		return x.SessionStartedAt
	}
	return 0
}

func (x *GetWalletSessionResponse) GetSessionExpiredAt() uint64 {
	if x != nil {
		return x.SessionExpiredAt
	}
	return 0
}

type GenerateMnemonicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MnemonicIdentity *MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
}

func (x *GenerateMnemonicRequest) Reset() {
	*x = GenerateMnemonicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateMnemonicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateMnemonicRequest) ProtoMessage() {}

func (x *GenerateMnemonicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateMnemonicRequest.ProtoReflect.Descriptor instead.
func (*GenerateMnemonicRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{24}
}

func (x *GenerateMnemonicRequest) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

type GenerateMnemonicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MnemonicIdentity      *MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
	EncryptedMnemonicData []byte                  `protobuf:"bytes,2,opt,name=EncryptedMnemonicData,proto3" json:"EncryptedMnemonicData,omitempty"`
}

func (x *GenerateMnemonicResponse) Reset() {
	*x = GenerateMnemonicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateMnemonicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateMnemonicResponse) ProtoMessage() {}

func (x *GenerateMnemonicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateMnemonicResponse.ProtoReflect.Descriptor instead.
func (*GenerateMnemonicResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{25}
}

func (x *GenerateMnemonicResponse) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

func (x *GenerateMnemonicResponse) GetEncryptedMnemonicData() []byte {
	if x != nil {
		return x.EncryptedMnemonicData
	}
	return nil
}

type LoadMnemonicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MnemonicIdentity *MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
}

func (x *LoadMnemonicRequest) Reset() {
	*x = LoadMnemonicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadMnemonicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadMnemonicRequest) ProtoMessage() {}

func (x *LoadMnemonicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadMnemonicRequest.ProtoReflect.Descriptor instead.
func (*LoadMnemonicRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{26}
}

func (x *LoadMnemonicRequest) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

type LoadMnemonicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MnemonicIdentity *MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
}

func (x *LoadMnemonicResponse) Reset() {
	*x = LoadMnemonicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadMnemonicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadMnemonicResponse) ProtoMessage() {}

func (x *LoadMnemonicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadMnemonicResponse.ProtoReflect.Descriptor instead.
func (*LoadMnemonicResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{27}
}

func (x *LoadMnemonicResponse) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

type UnLoadMnemonicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MnemonicIdentity *MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
}

func (x *UnLoadMnemonicRequest) Reset() {
	*x = UnLoadMnemonicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnLoadMnemonicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnLoadMnemonicRequest) ProtoMessage() {}

func (x *UnLoadMnemonicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnLoadMnemonicRequest.ProtoReflect.Descriptor instead.
func (*UnLoadMnemonicRequest) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{28}
}

func (x *UnLoadMnemonicRequest) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

type UnLoadMnemonicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MnemonicIdentity *MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=MnemonicIdentity,proto3" json:"MnemonicIdentity,omitempty"`
}

func (x *UnLoadMnemonicResponse) Reset() {
	*x = UnLoadMnemonicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hdwallet_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnLoadMnemonicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnLoadMnemonicResponse) ProtoMessage() {}

func (x *UnLoadMnemonicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hdwallet_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnLoadMnemonicResponse.ProtoReflect.Descriptor instead.
func (*UnLoadMnemonicResponse) Descriptor() ([]byte, []int) {
	return file_hdwallet_api_proto_rawDescGZIP(), []int{29}
}

func (x *UnLoadMnemonicResponse) GetMnemonicIdentity() *MnemonicWalletIdentity {
	if x != nil {
		return x.MnemonicIdentity
	}
	return nil
}

var File_hdwallet_api_proto protoreflect.FileDescriptor

var file_hdwallet_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x16, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6c,
	0x0a, 0x12, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x22, 0x30, 0x0a, 0x0e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x22, 0x6b,
	0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x48, 0x6f, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x6e,
	0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x4e, 0x6f, 0x6e, 0x48, 0x6f, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xf0, 0x02, 0x0a, 0x0a,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68,
	0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x64,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x73,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x07, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x48, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x64, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xd5, 0x02, 0x0a, 0x19,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x51, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x64, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x20, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x55, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x51, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x02, 0x0a, 0x17, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a,
	0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f,
	0x54, 0x78, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x54, 0x78, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x38, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x15, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x22, 0xdb, 0x02, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x22, 0xd9, 0x02, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6b, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68,
	0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x15, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x6e,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x13, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x68, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x69, 0x0a,
	0x15, 0x55, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x6a, 0x0a, 0x16, 0x55, 0x6e, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68,
	0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x10, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2a, 0x7c, 0x0a, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x45, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4d, 0x4e, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x4e, 0x45, 0x4d, 0x4f, 0x4e,
	0x49, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x02, 0x32, 0xce, 0x06, 0x0a, 0x12, 0x48, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0x57, 0x0a, 0x0c, 0x41, 0x64, 0x64,
	0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x68, 0x64, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68,
	0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x64,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2d, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xf7, 0x04, 0x0a, 0x0b, 0x48, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x70, 0x69, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x25, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64,
	0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x21, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x64,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x55, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x12, 0x23, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6e,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x68, 0x64, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3b, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x62, 0x63, 0x2d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x6f, 0x6e, 0x2d, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_hdwallet_api_proto_rawDescOnce sync.Once
	file_hdwallet_api_proto_rawDescData = file_hdwallet_api_proto_rawDesc
)

func file_hdwallet_api_proto_rawDescGZIP() []byte {
	file_hdwallet_api_proto_rawDescOnce.Do(func() {
		file_hdwallet_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_hdwallet_api_proto_rawDescData)
	})
	return file_hdwallet_api_proto_rawDescData
}

var file_hdwallet_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hdwallet_api_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_hdwallet_api_proto_goTypes = []interface{}{
	(WalletMakerStrategy)(0),                 // 0: hdwallet_api.WalletMakerStrategy
	(*DerivationAddressIdentity)(nil),        // 1: hdwallet_api.DerivationAddressIdentity
	(*GetEnabledWalletsRequest)(nil),         // 2: hdwallet_api.GetEnabledWalletsRequest
	(*MnemonicWalletIdentity)(nil),           // 3: hdwallet_api.MnemonicWalletIdentity
	(*MnemonicWalletData)(nil),               // 4: hdwallet_api.MnemonicWalletData
	(*WalletIdentity)(nil),                   // 5: hdwallet_api.WalletIdentity
	(*WalletBookmarks)(nil),                  // 6: hdwallet_api.WalletBookmarks
	(*WalletData)(nil),                       // 7: hdwallet_api.WalletData
	(*GetEnabledWalletsResponse)(nil),        // 8: hdwallet_api.GetEnabledWalletsResponse
	(*AddNewWalletRequest)(nil),              // 9: hdwallet_api.AddNewWalletRequest
	(*AddNewWalletResponse)(nil),             // 10: hdwallet_api.AddNewWalletResponse
	(*DerivationAddressRequest)(nil),         // 11: hdwallet_api.DerivationAddressRequest
	(*DerivationAddressResponse)(nil),        // 12: hdwallet_api.DerivationAddressResponse
	(*RangeRequestUnit)(nil),                 // 13: hdwallet_api.RangeRequestUnit
	(*DerivationAddressByRangeRequest)(nil),  // 14: hdwallet_api.DerivationAddressByRangeRequest
	(*DerivationAddressByRangeResponse)(nil), // 15: hdwallet_api.DerivationAddressByRangeResponse
	(*SignTransactionRequest)(nil),           // 16: hdwallet_api.SignTransactionRequest
	(*SignTransactionResponse)(nil),          // 17: hdwallet_api.SignTransactionResponse
	(*GetWalletInfoRequest)(nil),             // 18: hdwallet_api.GetWalletInfoRequest
	(*GetWalletInfoResponse)(nil),            // 19: hdwallet_api.GetWalletInfoResponse
	(*WalletSessionIdentity)(nil),            // 20: hdwallet_api.WalletSessionIdentity
	(*StartWalletSessionRequest)(nil),        // 21: hdwallet_api.StartWalletSessionRequest
	(*StartWalletSessionResponse)(nil),       // 22: hdwallet_api.StartWalletSessionResponse
	(*GetWalletSessionRequest)(nil),          // 23: hdwallet_api.GetWalletSessionRequest
	(*GetWalletSessionResponse)(nil),         // 24: hdwallet_api.GetWalletSessionResponse
	(*GenerateMnemonicRequest)(nil),          // 25: hdwallet_api.GenerateMnemonicRequest
	(*GenerateMnemonicResponse)(nil),         // 26: hdwallet_api.GenerateMnemonicResponse
	(*LoadMnemonicRequest)(nil),              // 27: hdwallet_api.LoadMnemonicRequest
	(*LoadMnemonicResponse)(nil),             // 28: hdwallet_api.LoadMnemonicResponse
	(*UnLoadMnemonicRequest)(nil),            // 29: hdwallet_api.UnLoadMnemonicRequest
	(*UnLoadMnemonicResponse)(nil),           // 30: hdwallet_api.UnLoadMnemonicResponse
}
var file_hdwallet_api_proto_depIdxs = []int32{
	3,  // 0: hdwallet_api.MnemonicWalletData.Identity:type_name -> hdwallet_api.MnemonicWalletIdentity
	5,  // 1: hdwallet_api.WalletData.Identity:type_name -> hdwallet_api.WalletIdentity
	0,  // 2: hdwallet_api.WalletData.Strategy:type_name -> hdwallet_api.WalletMakerStrategy
	6,  // 3: hdwallet_api.WalletData.Bookmarks:type_name -> hdwallet_api.WalletBookmarks
	4,  // 4: hdwallet_api.WalletData.MnemonicWallets:type_name -> hdwallet_api.MnemonicWalletData
	7,  // 5: hdwallet_api.GetEnabledWalletsResponse.Wallets:type_name -> hdwallet_api.WalletData
	0,  // 6: hdwallet_api.AddNewWalletRequest.Strategy:type_name -> hdwallet_api.WalletMakerStrategy
	7,  // 7: hdwallet_api.AddNewWalletResponse.Wallet:type_name -> hdwallet_api.WalletData
	5,  // 8: hdwallet_api.DerivationAddressRequest.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	3,  // 9: hdwallet_api.DerivationAddressRequest.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	20, // 10: hdwallet_api.DerivationAddressRequest.SessionIdentity:type_name -> hdwallet_api.WalletSessionIdentity
	1,  // 11: hdwallet_api.DerivationAddressRequest.AddressIdentity:type_name -> hdwallet_api.DerivationAddressIdentity
	5,  // 12: hdwallet_api.DerivationAddressResponse.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	3,  // 13: hdwallet_api.DerivationAddressResponse.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	20, // 14: hdwallet_api.DerivationAddressResponse.SessionIdentity:type_name -> hdwallet_api.WalletSessionIdentity
	1,  // 15: hdwallet_api.DerivationAddressResponse.AddressIdentity:type_name -> hdwallet_api.DerivationAddressIdentity
	5,  // 16: hdwallet_api.DerivationAddressByRangeRequest.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	3,  // 17: hdwallet_api.DerivationAddressByRangeRequest.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	13, // 18: hdwallet_api.DerivationAddressByRangeRequest.Ranges:type_name -> hdwallet_api.RangeRequestUnit
	5,  // 19: hdwallet_api.DerivationAddressByRangeResponse.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	3,  // 20: hdwallet_api.DerivationAddressByRangeResponse.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	1,  // 21: hdwallet_api.DerivationAddressByRangeResponse.AddressIdentities:type_name -> hdwallet_api.DerivationAddressIdentity
	1,  // 22: hdwallet_api.SignTransactionRequest.AddressIdentity:type_name -> hdwallet_api.DerivationAddressIdentity
	20, // 23: hdwallet_api.SignTransactionRequest.SessionIdentity:type_name -> hdwallet_api.WalletSessionIdentity
	5,  // 24: hdwallet_api.SignTransactionResponse.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	3,  // 25: hdwallet_api.SignTransactionResponse.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	20, // 26: hdwallet_api.SignTransactionResponse.SessionIdentity:type_name -> hdwallet_api.WalletSessionIdentity
	1,  // 27: hdwallet_api.SignTransactionResponse.TxOwnerIdentity:type_name -> hdwallet_api.DerivationAddressIdentity
	5,  // 28: hdwallet_api.GetWalletInfoRequest.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	5,  // 29: hdwallet_api.GetWalletInfoResponse.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	7,  // 30: hdwallet_api.GetWalletInfoResponse.WalletInfo:type_name -> hdwallet_api.WalletData
	5,  // 31: hdwallet_api.StartWalletSessionResponse.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	3,  // 32: hdwallet_api.StartWalletSessionResponse.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	20, // 33: hdwallet_api.StartWalletSessionResponse.SessionIdentity:type_name -> hdwallet_api.WalletSessionIdentity
	5,  // 34: hdwallet_api.GetWalletSessionResponse.WalletIdentity:type_name -> hdwallet_api.WalletIdentity
	3,  // 35: hdwallet_api.GetWalletSessionResponse.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	20, // 36: hdwallet_api.GetWalletSessionResponse.SessionIdentity:type_name -> hdwallet_api.WalletSessionIdentity
	3,  // 37: hdwallet_api.GenerateMnemonicRequest.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	3,  // 38: hdwallet_api.GenerateMnemonicResponse.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	3,  // 39: hdwallet_api.LoadMnemonicRequest.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	3,  // 40: hdwallet_api.LoadMnemonicResponse.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	3,  // 41: hdwallet_api.UnLoadMnemonicRequest.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	3,  // 42: hdwallet_api.UnLoadMnemonicResponse.MnemonicIdentity:type_name -> hdwallet_api.MnemonicWalletIdentity
	9,  // 43: hdwallet_api.HdWalletManagerApi.AddNewWallet:input_type -> hdwallet_api.AddNewWalletRequest
	18, // 44: hdwallet_api.HdWalletManagerApi.GetWalletInfo:input_type -> hdwallet_api.GetWalletInfoRequest
	2,  // 45: hdwallet_api.HdWalletManagerApi.GetEnabledWallets:input_type -> hdwallet_api.GetEnabledWalletsRequest
	11, // 46: hdwallet_api.HdWalletManagerApi.GetDerivationAddress:input_type -> hdwallet_api.DerivationAddressRequest
	14, // 47: hdwallet_api.HdWalletManagerApi.GetDerivationAddressByRange:input_type -> hdwallet_api.DerivationAddressByRangeRequest
	21, // 48: hdwallet_api.HdWalletManagerApi.StartWalletSession:input_type -> hdwallet_api.StartWalletSessionRequest
	23, // 49: hdwallet_api.HdWalletManagerApi.GetWalletSession:input_type -> hdwallet_api.GetWalletSessionRequest
	16, // 50: hdwallet_api.HdWalletManagerApi.SignTransaction:input_type -> hdwallet_api.SignTransactionRequest
	25, // 51: hdwallet_api.HdWalletApi.GenerateMnemonic:input_type -> hdwallet_api.GenerateMnemonicRequest
	27, // 52: hdwallet_api.HdWalletApi.LoadMnemonic:input_type -> hdwallet_api.LoadMnemonicRequest
	29, // 53: hdwallet_api.HdWalletApi.UnLoadMnemonic:input_type -> hdwallet_api.UnLoadMnemonicRequest
	11, // 54: hdwallet_api.HdWalletApi.GetDerivationAddress:input_type -> hdwallet_api.DerivationAddressRequest
	14, // 55: hdwallet_api.HdWalletApi.GetDerivationAddressByRange:input_type -> hdwallet_api.DerivationAddressByRangeRequest
	16, // 56: hdwallet_api.HdWalletApi.SignTransaction:input_type -> hdwallet_api.SignTransactionRequest
	10, // 57: hdwallet_api.HdWalletManagerApi.AddNewWallet:output_type -> hdwallet_api.AddNewWalletResponse
	19, // 58: hdwallet_api.HdWalletManagerApi.GetWalletInfo:output_type -> hdwallet_api.GetWalletInfoResponse
	8,  // 59: hdwallet_api.HdWalletManagerApi.GetEnabledWallets:output_type -> hdwallet_api.GetEnabledWalletsResponse
	12, // 60: hdwallet_api.HdWalletManagerApi.GetDerivationAddress:output_type -> hdwallet_api.DerivationAddressResponse
	15, // 61: hdwallet_api.HdWalletManagerApi.GetDerivationAddressByRange:output_type -> hdwallet_api.DerivationAddressByRangeResponse
	22, // 62: hdwallet_api.HdWalletManagerApi.StartWalletSession:output_type -> hdwallet_api.StartWalletSessionResponse
	24, // 63: hdwallet_api.HdWalletManagerApi.GetWalletSession:output_type -> hdwallet_api.GetWalletSessionResponse
	17, // 64: hdwallet_api.HdWalletManagerApi.SignTransaction:output_type -> hdwallet_api.SignTransactionResponse
	26, // 65: hdwallet_api.HdWalletApi.GenerateMnemonic:output_type -> hdwallet_api.GenerateMnemonicResponse
	28, // 66: hdwallet_api.HdWalletApi.LoadMnemonic:output_type -> hdwallet_api.LoadMnemonicResponse
	30, // 67: hdwallet_api.HdWalletApi.UnLoadMnemonic:output_type -> hdwallet_api.UnLoadMnemonicResponse
	12, // 68: hdwallet_api.HdWalletApi.GetDerivationAddress:output_type -> hdwallet_api.DerivationAddressResponse
	15, // 69: hdwallet_api.HdWalletApi.GetDerivationAddressByRange:output_type -> hdwallet_api.DerivationAddressByRangeResponse
	17, // 70: hdwallet_api.HdWalletApi.SignTransaction:output_type -> hdwallet_api.SignTransactionResponse
	57, // [57:71] is the sub-list for method output_type
	43, // [43:57] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_hdwallet_api_proto_init() }
func file_hdwallet_api_proto_init() {
	if File_hdwallet_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hdwallet_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationAddressIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnabledWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MnemonicWalletIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MnemonicWalletData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletBookmarks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnabledWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeRequestUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationAddressByRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DerivationAddressByRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletSessionIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWalletSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWalletSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateMnemonicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateMnemonicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadMnemonicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadMnemonicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnLoadMnemonicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hdwallet_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnLoadMnemonicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hdwallet_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_hdwallet_api_proto_goTypes,
		DependencyIndexes: file_hdwallet_api_proto_depIdxs,
		EnumInfos:         file_hdwallet_api_proto_enumTypes,
		MessageInfos:      file_hdwallet_api_proto_msgTypes,
	}.Build()
	File_hdwallet_api_proto = out.File
	file_hdwallet_api_proto_rawDesc = nil
	file_hdwallet_api_proto_goTypes = nil
	file_hdwallet_api_proto_depIdxs = nil
}
