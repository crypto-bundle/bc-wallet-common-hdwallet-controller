//    MIT License
//
//    Copyright (c) 2022-2024 Aleksei Kotelnikov(gudron2s@gmail.com)
//
//    Permission is hereby granted, free of charge, to any person obtaining a copy
//    of this software and associated documentation files (the "Software"), to deal
//    in the Software without restriction, including without limitation the rights
//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    copies of the Software, and to permit persons to whom the Software is
//    furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included in all
//    copies or substantial portions of the Software.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//    SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.2
// source: controller_api.proto

package controller

import (
	common "github.com/crypto-bundle/bc-wallet-common-hdwallet-controller/pkg/grpc/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WalletSessionStatus int32

const (
	WalletSessionStatus_WALLET_SESSION_STATUS_PLACEHOLDER WalletSessionStatus = 0
	WalletSessionStatus_WALLET_SESSION_STATUS_PREPARED    WalletSessionStatus = 1
	WalletSessionStatus_WALLET_SESSION_STATUS_CLOSED      WalletSessionStatus = 2
)

// Enum value maps for WalletSessionStatus.
var (
	WalletSessionStatus_name = map[int32]string{
		0: "WALLET_SESSION_STATUS_PLACEHOLDER",
		1: "WALLET_SESSION_STATUS_PREPARED",
		2: "WALLET_SESSION_STATUS_CLOSED",
	}
	WalletSessionStatus_value = map[string]int32{
		"WALLET_SESSION_STATUS_PLACEHOLDER": 0,
		"WALLET_SESSION_STATUS_PREPARED":    1,
		"WALLET_SESSION_STATUS_CLOSED":      2,
	}
)

func (x WalletSessionStatus) Enum() *WalletSessionStatus {
	p := new(WalletSessionStatus)
	*p = x
	return p
}

func (x WalletSessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletSessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_api_proto_enumTypes[0].Descriptor()
}

func (WalletSessionStatus) Type() protoreflect.EnumType {
	return &file_controller_api_proto_enumTypes[0]
}

func (x WalletSessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletSessionStatus.Descriptor instead.
func (WalletSessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{0}
}

type SignRequestData_ReqStatus int32

const (
	SignRequestData_REQUEST_PLACEHOLDER SignRequestData_ReqStatus = 0
	SignRequestData_REQUEST_CREATED     SignRequestData_ReqStatus = 1
	SignRequestData_REQUEST_PREPARED    SignRequestData_ReqStatus = 2
	SignRequestData_REQUEST_SIGNED      SignRequestData_ReqStatus = 3
	SignRequestData_REQUEST_FAILED      SignRequestData_ReqStatus = 4
)

// Enum value maps for SignRequestData_ReqStatus.
var (
	SignRequestData_ReqStatus_name = map[int32]string{
		0: "REQUEST_PLACEHOLDER",
		1: "REQUEST_CREATED",
		2: "REQUEST_PREPARED",
		3: "REQUEST_SIGNED",
		4: "REQUEST_FAILED",
	}
	SignRequestData_ReqStatus_value = map[string]int32{
		"REQUEST_PLACEHOLDER": 0,
		"REQUEST_CREATED":     1,
		"REQUEST_PREPARED":    2,
		"REQUEST_SIGNED":      3,
		"REQUEST_FAILED":      4,
	}
)

func (x SignRequestData_ReqStatus) Enum() *SignRequestData_ReqStatus {
	p := new(SignRequestData_ReqStatus)
	*p = x
	return p
}

func (x SignRequestData_ReqStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignRequestData_ReqStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_api_proto_enumTypes[1].Descriptor()
}

func (SignRequestData_ReqStatus) Type() protoreflect.EnumType {
	return &file_controller_api_proto_enumTypes[1]
}

func (x SignRequestData_ReqStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignRequestData_ReqStatus.Descriptor instead.
func (SignRequestData_ReqStatus) EnumDescriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{4, 0}
}

type Event_Type int32

const (
	Event_EVENT_TYPE_PLACEHOLDER  Event_Type = 0
	Event_EVENT_TYPE_SESSION      Event_Type = 1
	Event_EVENT_TYPE_SIGN_REQUEST Event_Type = 2
)

// Enum value maps for Event_Type.
var (
	Event_Type_name = map[int32]string{
		0: "EVENT_TYPE_PLACEHOLDER",
		1: "EVENT_TYPE_SESSION",
		2: "EVENT_TYPE_SIGN_REQUEST",
	}
	Event_Type_value = map[string]int32{
		"EVENT_TYPE_PLACEHOLDER":  0,
		"EVENT_TYPE_SESSION":      1,
		"EVENT_TYPE_SIGN_REQUEST": 2,
	}
)

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}

func (x Event_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_api_proto_enumTypes[2].Descriptor()
}

func (Event_Type) Type() protoreflect.EnumType {
	return &file_controller_api_proto_enumTypes[2]
}

func (x Event_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Type.Descriptor instead.
func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{38, 0}
}

type WalletSessionEvent_Type int32

const (
	WalletSessionEvent_PLACEHOLDER WalletSessionEvent_Type = 0
	WalletSessionEvent_STARTED     WalletSessionEvent_Type = 1
	WalletSessionEvent_CLOSED      WalletSessionEvent_Type = 2
)

// Enum value maps for WalletSessionEvent_Type.
var (
	WalletSessionEvent_Type_name = map[int32]string{
		0: "PLACEHOLDER",
		1: "STARTED",
		2: "CLOSED",
	}
	WalletSessionEvent_Type_value = map[string]int32{
		"PLACEHOLDER": 0,
		"STARTED":     1,
		"CLOSED":      2,
	}
)

func (x WalletSessionEvent_Type) Enum() *WalletSessionEvent_Type {
	p := new(WalletSessionEvent_Type)
	*p = x
	return p
}

func (x WalletSessionEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletSessionEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_api_proto_enumTypes[3].Descriptor()
}

func (WalletSessionEvent_Type) Type() protoreflect.EnumType {
	return &file_controller_api_proto_enumTypes[3]
}

func (x WalletSessionEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletSessionEvent_Type.Descriptor instead.
func (WalletSessionEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{39, 0}
}

type SignRequestEvent_Type int32

const (
	SignRequestEvent_PLACEHOLDER SignRequestEvent_Type = 0
	SignRequestEvent_PREPARED    SignRequestEvent_Type = 1
	SignRequestEvent_CLOSED      SignRequestEvent_Type = 2
)

// Enum value maps for SignRequestEvent_Type.
var (
	SignRequestEvent_Type_name = map[int32]string{
		0: "PLACEHOLDER",
		1: "PREPARED",
		2: "CLOSED",
	}
	SignRequestEvent_Type_value = map[string]int32{
		"PLACEHOLDER": 0,
		"PREPARED":    1,
		"CLOSED":      2,
	}
)

func (x SignRequestEvent_Type) Enum() *SignRequestEvent_Type {
	p := new(SignRequestEvent_Type)
	*p = x
	return p
}

func (x SignRequestEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignRequestEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_api_proto_enumTypes[4].Descriptor()
}

func (SignRequestEvent_Type) Type() protoreflect.EnumType {
	return &file_controller_api_proto_enumTypes[4]
}

func (x SignRequestEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignRequestEvent_Type.Descriptor instead.
func (SignRequestEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{40, 0}
}

type AppInstanceIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *AppInstanceIdentity) Reset() {
	*x = AppInstanceIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInstanceIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInstanceIdentity) ProtoMessage() {}

func (x *AppInstanceIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInstanceIdentity.ProtoReflect.Descriptor instead.
func (*AppInstanceIdentity) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{0}
}

func (x *AppInstanceIdentity) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type WalletSessionIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUUID string `protobuf:"bytes,1,opt,name=SessionUUID,proto3" json:"SessionUUID,omitempty"`
}

func (x *WalletSessionIdentity) Reset() {
	*x = WalletSessionIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletSessionIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletSessionIdentity) ProtoMessage() {}

func (x *WalletSessionIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletSessionIdentity.ProtoReflect.Descriptor instead.
func (*WalletSessionIdentity) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{1}
}

func (x *WalletSessionIdentity) GetSessionUUID() string {
	if x != nil {
		return x.SessionUUID
	}
	return ""
}

type SignRequestIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *SignRequestIdentity) Reset() {
	*x = SignRequestIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequestIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequestIdentity) ProtoMessage() {}

func (x *SignRequestIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequestIdentity.ProtoReflect.Descriptor instead.
func (*SignRequestIdentity) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{2}
}

func (x *SignRequestIdentity) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type SignPurposeIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *SignPurposeIdentity) Reset() {
	*x = SignPurposeIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignPurposeIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignPurposeIdentity) ProtoMessage() {}

func (x *SignPurposeIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignPurposeIdentity.ProtoReflect.Descriptor instead.
func (*SignPurposeIdentity) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{3}
}

func (x *SignPurposeIdentity) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type SignRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *SignRequestIdentity      `protobuf:"bytes,1,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	Status     SignRequestData_ReqStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=manager_api.SignRequestData_ReqStatus" json:"Status,omitempty"`
	CreateAt   uint64                    `protobuf:"varint,3,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
}

func (x *SignRequestData) Reset() {
	*x = SignRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequestData) ProtoMessage() {}

func (x *SignRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequestData.ProtoReflect.Descriptor instead.
func (*SignRequestData) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{4}
}

func (x *SignRequestData) GetIdentifier() *SignRequestIdentity {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SignRequestData) GetStatus() SignRequestData_ReqStatus {
	if x != nil {
		return x.Status
	}
	return SignRequestData_REQUEST_PLACEHOLDER
}

func (x *SignRequestData) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type GetEnabledWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEnabledWalletsRequest) Reset() {
	*x = GetEnabledWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnabledWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnabledWalletsRequest) ProtoMessage() {}

func (x *GetEnabledWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnabledWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetEnabledWalletsRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{5}
}

type GetEnabledWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletsCount uint32                       `protobuf:"varint,1,opt,name=WalletsCount,proto3" json:"WalletsCount,omitempty"`
	WalletsData  []*common.MnemonicWalletData `protobuf:"bytes,2,rep,name=WalletsData,proto3" json:"WalletsData,omitempty"`
	Bookmarks    map[string]uint32            `protobuf:"bytes,3,rep,name=Bookmarks,proto3" json:"Bookmarks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetEnabledWalletsResponse) Reset() {
	*x = GetEnabledWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnabledWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnabledWalletsResponse) ProtoMessage() {}

func (x *GetEnabledWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnabledWalletsResponse.ProtoReflect.Descriptor instead.
func (*GetEnabledWalletsResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetEnabledWalletsResponse) GetWalletsCount() uint32 {
	if x != nil {
		return x.WalletsCount
	}
	return 0
}

func (x *GetEnabledWalletsResponse) GetWalletsData() []*common.MnemonicWalletData {
	if x != nil {
		return x.WalletsData
	}
	return nil
}

func (x *GetEnabledWalletsResponse) GetBookmarks() map[string]uint32 {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type AddNewWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddNewWalletRequest) Reset() {
	*x = AddNewWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewWalletRequest) ProtoMessage() {}

func (x *AddNewWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewWalletRequest.ProtoReflect.Descriptor instead.
func (*AddNewWalletRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{7}
}

type AddNewWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	WalletStatus     common.WalletStatus            `protobuf:"varint,2,opt,name=WalletStatus,proto3,enum=common.WalletStatus" json:"WalletStatus,omitempty"`
}

func (x *AddNewWalletResponse) Reset() {
	*x = AddNewWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewWalletResponse) ProtoMessage() {}

func (x *AddNewWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewWalletResponse.ProtoReflect.Descriptor instead.
func (*AddNewWalletResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{8}
}

func (x *AddNewWalletResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *AddNewWalletResponse) GetWalletStatus() common.WalletStatus {
	if x != nil {
		return x.WalletStatus
	}
	return common.WalletStatus_WALLET_STATUS_PLACEHOLDER
}

type ImportWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MnemonicPhrase []byte `protobuf:"bytes,1,opt,name=MnemonicPhrase,proto3" json:"MnemonicPhrase,omitempty"`
}

func (x *ImportWalletRequest) Reset() {
	*x = ImportWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWalletRequest) ProtoMessage() {}

func (x *ImportWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWalletRequest.ProtoReflect.Descriptor instead.
func (*ImportWalletRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{9}
}

func (x *ImportWalletRequest) GetMnemonicPhrase() []byte {
	if x != nil {
		return x.MnemonicPhrase
	}
	return nil
}

type ImportWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
}

func (x *ImportWalletResponse) Reset() {
	*x = ImportWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWalletResponse) ProtoMessage() {}

func (x *ImportWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWalletResponse.ProtoReflect.Descriptor instead.
func (*ImportWalletResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{10}
}

func (x *ImportWalletResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

type EnableWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
}

func (x *EnableWalletRequest) Reset() {
	*x = EnableWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableWalletRequest) ProtoMessage() {}

func (x *EnableWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableWalletRequest.ProtoReflect.Descriptor instead.
func (*EnableWalletRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{11}
}

func (x *EnableWalletRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

type EnableWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	WalletStatus     common.WalletStatus            `protobuf:"varint,2,opt,name=WalletStatus,proto3,enum=common.WalletStatus" json:"WalletStatus,omitempty"`
}

func (x *EnableWalletResponse) Reset() {
	*x = EnableWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableWalletResponse) ProtoMessage() {}

func (x *EnableWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableWalletResponse.ProtoReflect.Descriptor instead.
func (*EnableWalletResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{12}
}

func (x *EnableWalletResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *EnableWalletResponse) GetWalletStatus() common.WalletStatus {
	if x != nil {
		return x.WalletStatus
	}
	return common.WalletStatus_WALLET_STATUS_PLACEHOLDER
}

type DisableWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
}

func (x *DisableWalletRequest) Reset() {
	*x = DisableWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableWalletRequest) ProtoMessage() {}

func (x *DisableWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableWalletRequest.ProtoReflect.Descriptor instead.
func (*DisableWalletRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{13}
}

func (x *DisableWalletRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

type DisableWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	WalletStatus     common.WalletStatus            `protobuf:"varint,2,opt,name=WalletStatus,proto3,enum=common.WalletStatus" json:"WalletStatus,omitempty"`
}

func (x *DisableWalletResponse) Reset() {
	*x = DisableWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableWalletResponse) ProtoMessage() {}

func (x *DisableWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableWalletResponse.ProtoReflect.Descriptor instead.
func (*DisableWalletResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{14}
}

func (x *DisableWalletResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *DisableWalletResponse) GetWalletStatus() common.WalletStatus {
	if x != nil {
		return x.WalletStatus
	}
	return common.WalletStatus_WALLET_STATUS_PLACEHOLDER
}

type DisableWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifiers []*common.MnemonicWalletIdentity `protobuf:"bytes,1,rep,name=WalletIdentifiers,proto3" json:"WalletIdentifiers,omitempty"`
}

func (x *DisableWalletsRequest) Reset() {
	*x = DisableWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableWalletsRequest) ProtoMessage() {}

func (x *DisableWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableWalletsRequest.ProtoReflect.Descriptor instead.
func (*DisableWalletsRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{15}
}

func (x *DisableWalletsRequest) GetWalletIdentifiers() []*common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifiers
	}
	return nil
}

type DisableWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletsCount uint32                       `protobuf:"varint,1,opt,name=WalletsCount,proto3" json:"WalletsCount,omitempty"`
	WalletsData  []*common.MnemonicWalletData `protobuf:"bytes,2,rep,name=WalletsData,proto3" json:"WalletsData,omitempty"`
	Bookmarks    map[string]uint32            `protobuf:"bytes,3,rep,name=Bookmarks,proto3" json:"Bookmarks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DisableWalletsResponse) Reset() {
	*x = DisableWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableWalletsResponse) ProtoMessage() {}

func (x *DisableWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableWalletsResponse.ProtoReflect.Descriptor instead.
func (*DisableWalletsResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{16}
}

func (x *DisableWalletsResponse) GetWalletsCount() uint32 {
	if x != nil {
		return x.WalletsCount
	}
	return 0
}

func (x *DisableWalletsResponse) GetWalletsData() []*common.MnemonicWalletData {
	if x != nil {
		return x.WalletsData
	}
	return nil
}

func (x *DisableWalletsResponse) GetBookmarks() map[string]uint32 {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type EnableWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifiers []*common.MnemonicWalletIdentity `protobuf:"bytes,1,rep,name=WalletIdentifiers,proto3" json:"WalletIdentifiers,omitempty"`
}

func (x *EnableWalletsRequest) Reset() {
	*x = EnableWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableWalletsRequest) ProtoMessage() {}

func (x *EnableWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableWalletsRequest.ProtoReflect.Descriptor instead.
func (*EnableWalletsRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{17}
}

func (x *EnableWalletsRequest) GetWalletIdentifiers() []*common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifiers
	}
	return nil
}

type EnableWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletsCount uint32                       `protobuf:"varint,1,opt,name=WalletsCount,proto3" json:"WalletsCount,omitempty"`
	WalletsData  []*common.MnemonicWalletData `protobuf:"bytes,2,rep,name=WalletsData,proto3" json:"WalletsData,omitempty"`
	Bookmarks    map[string]uint32            `protobuf:"bytes,3,rep,name=Bookmarks,proto3" json:"Bookmarks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EnableWalletsResponse) Reset() {
	*x = EnableWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableWalletsResponse) ProtoMessage() {}

func (x *EnableWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableWalletsResponse.ProtoReflect.Descriptor instead.
func (*EnableWalletsResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{18}
}

func (x *EnableWalletsResponse) GetWalletsCount() uint32 {
	if x != nil {
		return x.WalletsCount
	}
	return 0
}

func (x *EnableWalletsResponse) GetWalletsData() []*common.MnemonicWalletData {
	if x != nil {
		return x.WalletsData
	}
	return nil
}

func (x *EnableWalletsResponse) GetBookmarks() map[string]uint32 {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier  *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	AccountIdentifier *common.AccountIdentity        `protobuf:"bytes,3,opt,name=AccountIdentifier,proto3" json:"AccountIdentifier,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetAccountRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *GetAccountRequest) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *GetAccountRequest) GetAccountIdentifier() *common.AccountIdentity {
	if x != nil {
		return x.AccountIdentifier
	}
	return nil
}

type GetAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier  *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	AccountIdentifier *common.AccountIdentity        `protobuf:"bytes,3,opt,name=AccountIdentifier,proto3" json:"AccountIdentifier,omitempty"`
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetAccountResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *GetAccountResponse) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *GetAccountResponse) GetAccountIdentifier() *common.AccountIdentity {
	if x != nil {
		return x.AccountIdentifier
	}
	return nil
}

type GetMultipleAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier  *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	Parameters        *anypb.Any                     `protobuf:"bytes,3,opt,name=Parameters,proto3" json:"Parameters,omitempty"`
}

func (x *GetMultipleAccountRequest) Reset() {
	*x = GetMultipleAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultipleAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultipleAccountRequest) ProtoMessage() {}

func (x *GetMultipleAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultipleAccountRequest.ProtoReflect.Descriptor instead.
func (*GetMultipleAccountRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetMultipleAccountRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *GetMultipleAccountRequest) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *GetMultipleAccountRequest) GetParameters() *anypb.Any {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type GetMultipleAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier       *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier      *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	AccountIdentitiesCount uint64                         `protobuf:"varint,3,opt,name=AccountIdentitiesCount,proto3" json:"AccountIdentitiesCount,omitempty"`
	AccountIdentifiers     []*common.AccountIdentity      `protobuf:"bytes,4,rep,name=AccountIdentifiers,proto3" json:"AccountIdentifiers,omitempty"`
}

func (x *GetMultipleAccountResponse) Reset() {
	*x = GetMultipleAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultipleAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultipleAccountResponse) ProtoMessage() {}

func (x *GetMultipleAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultipleAccountResponse.ProtoReflect.Descriptor instead.
func (*GetMultipleAccountResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{22}
}

func (x *GetMultipleAccountResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *GetMultipleAccountResponse) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *GetMultipleAccountResponse) GetAccountIdentitiesCount() uint64 {
	if x != nil {
		return x.AccountIdentitiesCount
	}
	return 0
}

func (x *GetMultipleAccountResponse) GetAccountIdentifiers() []*common.AccountIdentity {
	if x != nil {
		return x.AccountIdentifiers
	}
	return nil
}

type GetWalletInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
}

func (x *GetWalletInfoRequest) Reset() {
	*x = GetWalletInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletInfoRequest) ProtoMessage() {}

func (x *GetWalletInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletInfoRequest.ProtoReflect.Descriptor instead.
func (*GetWalletInfoRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{23}
}

func (x *GetWalletInfoRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

type GetWalletInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	WalletStatus     common.WalletStatus            `protobuf:"varint,2,opt,name=WalletStatus,proto3,enum=common.WalletStatus" json:"WalletStatus,omitempty"`
}

func (x *GetWalletInfoResponse) Reset() {
	*x = GetWalletInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletInfoResponse) ProtoMessage() {}

func (x *GetWalletInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletInfoResponse.ProtoReflect.Descriptor instead.
func (*GetWalletInfoResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{24}
}

func (x *GetWalletInfoResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *GetWalletInfoResponse) GetWalletStatus() common.WalletStatus {
	if x != nil {
		return x.WalletStatus
	}
	return common.WalletStatus_WALLET_STATUS_PLACEHOLDER
}

type StartWalletSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
}

func (x *StartWalletSessionRequest) Reset() {
	*x = StartWalletSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWalletSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWalletSessionRequest) ProtoMessage() {}

func (x *StartWalletSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWalletSessionRequest.ProtoReflect.Descriptor instead.
func (*StartWalletSessionRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{25}
}

func (x *StartWalletSessionRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

type StartWalletSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier  *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	SessionStatus     WalletSessionStatus            `protobuf:"varint,3,opt,name=SessionStatus,proto3,enum=manager_api.WalletSessionStatus" json:"SessionStatus,omitempty"`
	SessionStartedAt  uint64                         `protobuf:"varint,4,opt,name=SessionStartedAt,proto3" json:"SessionStartedAt,omitempty"`
	SessionExpiredAt  uint64                         `protobuf:"varint,5,opt,name=SessionExpiredAt,proto3" json:"SessionExpiredAt,omitempty"`
}

func (x *StartWalletSessionResponse) Reset() {
	*x = StartWalletSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWalletSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWalletSessionResponse) ProtoMessage() {}

func (x *StartWalletSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWalletSessionResponse.ProtoReflect.Descriptor instead.
func (*StartWalletSessionResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{26}
}

func (x *StartWalletSessionResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *StartWalletSessionResponse) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *StartWalletSessionResponse) GetSessionStatus() WalletSessionStatus {
	if x != nil {
		return x.SessionStatus
	}
	return WalletSessionStatus_WALLET_SESSION_STATUS_PLACEHOLDER
}

func (x *StartWalletSessionResponse) GetSessionStartedAt() uint64 {
	if x != nil {
		return x.SessionStartedAt
	}
	return 0
}

func (x *StartWalletSessionResponse) GetSessionExpiredAt() uint64 {
	if x != nil {
		return x.SessionExpiredAt
	}
	return 0
}

type GetWalletSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier  *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
}

func (x *GetWalletSessionRequest) Reset() {
	*x = GetWalletSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletSessionRequest) ProtoMessage() {}

func (x *GetWalletSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletSessionRequest.ProtoReflect.Descriptor instead.
func (*GetWalletSessionRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{27}
}

func (x *GetWalletSessionRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *GetWalletSessionRequest) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

type GetWalletSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	Session          *SessionInfo                   `protobuf:"bytes,2,opt,name=Session,proto3" json:"Session,omitempty"`
}

func (x *GetWalletSessionResponse) Reset() {
	*x = GetWalletSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletSessionResponse) ProtoMessage() {}

func (x *GetWalletSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletSessionResponse.ProtoReflect.Descriptor instead.
func (*GetWalletSessionResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{28}
}

func (x *GetWalletSessionResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *GetWalletSessionResponse) GetSession() *SessionInfo {
	if x != nil {
		return x.Session
	}
	return nil
}

type GetWalletSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
}

func (x *GetWalletSessionsRequest) Reset() {
	*x = GetWalletSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletSessionsRequest) ProtoMessage() {}

func (x *GetWalletSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletSessionsRequest.ProtoReflect.Descriptor instead.
func (*GetWalletSessionsRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{29}
}

func (x *GetWalletSessionsRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionIdentifier *WalletSessionIdentity `protobuf:"bytes,1,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	SessionStatus     WalletSessionStatus    `protobuf:"varint,2,opt,name=SessionStatus,proto3,enum=manager_api.WalletSessionStatus" json:"SessionStatus,omitempty"`
	SessionStartedAt  uint64                 `protobuf:"varint,3,opt,name=SessionStartedAt,proto3" json:"SessionStartedAt,omitempty"`
	SessionExpiredAt  uint64                 `protobuf:"varint,4,opt,name=SessionExpiredAt,proto3" json:"SessionExpiredAt,omitempty"`
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{30}
}

func (x *SessionInfo) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *SessionInfo) GetSessionStatus() WalletSessionStatus {
	if x != nil {
		return x.SessionStatus
	}
	return WalletSessionStatus_WALLET_SESSION_STATUS_PLACEHOLDER
}

func (x *SessionInfo) GetSessionStartedAt() uint64 {
	if x != nil {
		return x.SessionStartedAt
	}
	return 0
}

func (x *SessionInfo) GetSessionExpiredAt() uint64 {
	if x != nil {
		return x.SessionExpiredAt
	}
	return 0
}

type GetWalletSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	ActiveSessions   []*SessionInfo                 `protobuf:"bytes,2,rep,name=ActiveSessions,proto3" json:"ActiveSessions,omitempty"`
}

func (x *GetWalletSessionsResponse) Reset() {
	*x = GetWalletSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletSessionsResponse) ProtoMessage() {}

func (x *GetWalletSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletSessionsResponse.ProtoReflect.Descriptor instead.
func (*GetWalletSessionsResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{31}
}

func (x *GetWalletSessionsResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *GetWalletSessionsResponse) GetActiveSessions() []*SessionInfo {
	if x != nil {
		return x.ActiveSessions
	}
	return nil
}

type CloseWalletSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier  *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
}

func (x *CloseWalletSessionsRequest) Reset() {
	*x = CloseWalletSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseWalletSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseWalletSessionsRequest) ProtoMessage() {}

func (x *CloseWalletSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseWalletSessionsRequest.ProtoReflect.Descriptor instead.
func (*CloseWalletSessionsRequest) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{32}
}

func (x *CloseWalletSessionsRequest) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *CloseWalletSessionsRequest) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

type CloseWalletSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier  *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	SessionStatus     WalletSessionStatus            `protobuf:"varint,3,opt,name=SessionStatus,proto3,enum=manager_api.WalletSessionStatus" json:"SessionStatus,omitempty"`
}

func (x *CloseWalletSessionsResponse) Reset() {
	*x = CloseWalletSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseWalletSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseWalletSessionsResponse) ProtoMessage() {}

func (x *CloseWalletSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseWalletSessionsResponse.ProtoReflect.Descriptor instead.
func (*CloseWalletSessionsResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{33}
}

func (x *CloseWalletSessionsResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *CloseWalletSessionsResponse) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *CloseWalletSessionsResponse) GetSessionStatus() WalletSessionStatus {
	if x != nil {
		return x.SessionStatus
	}
	return WalletSessionStatus_WALLET_SESSION_STATUS_PLACEHOLDER
}

type ExecuteSignRequestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier      *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	AccountIdentifier     *common.AccountIdentity        `protobuf:"bytes,2,opt,name=AccountIdentifier,proto3" json:"AccountIdentifier,omitempty"`
	SessionIdentifier     *WalletSessionIdentity         `protobuf:"bytes,3,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	SignRequestIdentifier *SignRequestIdentity           `protobuf:"bytes,4,opt,name=SignRequestIdentifier,proto3" json:"SignRequestIdentifier,omitempty"`
	CreatedTxData         []byte                         `protobuf:"bytes,5,opt,name=CreatedTxData,proto3" json:"CreatedTxData,omitempty"`
}

func (x *ExecuteSignRequestReq) Reset() {
	*x = ExecuteSignRequestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSignRequestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSignRequestReq) ProtoMessage() {}

func (x *ExecuteSignRequestReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSignRequestReq.ProtoReflect.Descriptor instead.
func (*ExecuteSignRequestReq) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{34}
}

func (x *ExecuteSignRequestReq) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *ExecuteSignRequestReq) GetAccountIdentifier() *common.AccountIdentity {
	if x != nil {
		return x.AccountIdentifier
	}
	return nil
}

func (x *ExecuteSignRequestReq) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *ExecuteSignRequestReq) GetSignRequestIdentifier() *SignRequestIdentity {
	if x != nil {
		return x.SignRequestIdentifier
	}
	return nil
}

func (x *ExecuteSignRequestReq) GetCreatedTxData() []byte {
	if x != nil {
		return x.CreatedTxData
	}
	return nil
}

type ExecuteSignRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier     *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier    *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	AccountIdentifier    *common.AccountIdentity        `protobuf:"bytes,3,opt,name=AccountIdentifier,proto3" json:"AccountIdentifier,omitempty"`
	SignatureRequestInfo *SignRequestData               `protobuf:"bytes,4,opt,name=SignatureRequestInfo,proto3" json:"SignatureRequestInfo,omitempty"`
	SignedTxData         []byte                         `protobuf:"bytes,5,opt,name=SignedTxData,proto3" json:"SignedTxData,omitempty"`
}

func (x *ExecuteSignRequestResponse) Reset() {
	*x = ExecuteSignRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSignRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSignRequestResponse) ProtoMessage() {}

func (x *ExecuteSignRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSignRequestResponse.ProtoReflect.Descriptor instead.
func (*ExecuteSignRequestResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{35}
}

func (x *ExecuteSignRequestResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *ExecuteSignRequestResponse) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *ExecuteSignRequestResponse) GetAccountIdentifier() *common.AccountIdentity {
	if x != nil {
		return x.AccountIdentifier
	}
	return nil
}

func (x *ExecuteSignRequestResponse) GetSignatureRequestInfo() *SignRequestData {
	if x != nil {
		return x.SignatureRequestInfo
	}
	return nil
}

func (x *ExecuteSignRequestResponse) GetSignedTxData() []byte {
	if x != nil {
		return x.SignedTxData
	}
	return nil
}

type PrepareSignRequestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier      *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	AccountIdentifier     *common.AccountIdentity        `protobuf:"bytes,2,opt,name=AccountIdentifier,proto3" json:"AccountIdentifier,omitempty"`
	SessionIdentifier     *WalletSessionIdentity         `protobuf:"bytes,3,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	SignPurposeIdentifier *SignPurposeIdentity           `protobuf:"bytes,4,opt,name=SignPurposeIdentifier,proto3" json:"SignPurposeIdentifier,omitempty"`
}

func (x *PrepareSignRequestReq) Reset() {
	*x = PrepareSignRequestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSignRequestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSignRequestReq) ProtoMessage() {}

func (x *PrepareSignRequestReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSignRequestReq.ProtoReflect.Descriptor instead.
func (*PrepareSignRequestReq) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{36}
}

func (x *PrepareSignRequestReq) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *PrepareSignRequestReq) GetAccountIdentifier() *common.AccountIdentity {
	if x != nil {
		return x.AccountIdentifier
	}
	return nil
}

func (x *PrepareSignRequestReq) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *PrepareSignRequestReq) GetSignPurposeIdentifier() *SignPurposeIdentity {
	if x != nil {
		return x.SignPurposeIdentifier
	}
	return nil
}

type PrepareSignRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletIdentifier     *common.MnemonicWalletIdentity `protobuf:"bytes,1,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier    *WalletSessionIdentity         `protobuf:"bytes,2,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
	AccountIdentifier    *common.AccountIdentity        `protobuf:"bytes,3,opt,name=AccountIdentifier,proto3" json:"AccountIdentifier,omitempty"`
	SignatureRequestInfo *SignRequestData               `protobuf:"bytes,4,opt,name=SignatureRequestInfo,proto3" json:"SignatureRequestInfo,omitempty"`
}

func (x *PrepareSignRequestResponse) Reset() {
	*x = PrepareSignRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSignRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSignRequestResponse) ProtoMessage() {}

func (x *PrepareSignRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSignRequestResponse.ProtoReflect.Descriptor instead.
func (*PrepareSignRequestResponse) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{37}
}

func (x *PrepareSignRequestResponse) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *PrepareSignRequestResponse) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

func (x *PrepareSignRequestResponse) GetAccountIdentifier() *common.AccountIdentity {
	if x != nil {
		return x.AccountIdentifier
	}
	return nil
}

func (x *PrepareSignRequestResponse) GetSignatureRequestInfo() *SignRequestData {
	if x != nil {
		return x.SignatureRequestInfo
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType             Event_Type           `protobuf:"varint,1,opt,name=EventType,proto3,enum=manager_api.Event_Type" json:"EventType,omitempty"`
	AppInstanceIdentifier *AppInstanceIdentity `protobuf:"bytes,2,opt,name=AppInstanceIdentifier,proto3" json:"AppInstanceIdentifier,omitempty"`
	Data                  []byte               `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{38}
}

func (x *Event) GetEventType() Event_Type {
	if x != nil {
		return x.EventType
	}
	return Event_EVENT_TYPE_PLACEHOLDER
}

func (x *Event) GetAppInstanceIdentifier() *AppInstanceIdentity {
	if x != nil {
		return x.AppInstanceIdentifier
	}
	return nil
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WalletSessionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType         WalletSessionEvent_Type        `protobuf:"varint,1,opt,name=EventType,proto3,enum=manager_api.WalletSessionEvent_Type" json:"EventType,omitempty"`
	WalletIdentifier  *common.MnemonicWalletIdentity `protobuf:"bytes,2,opt,name=WalletIdentifier,proto3" json:"WalletIdentifier,omitempty"`
	SessionIdentifier *WalletSessionIdentity         `protobuf:"bytes,3,opt,name=SessionIdentifier,proto3" json:"SessionIdentifier,omitempty"`
}

func (x *WalletSessionEvent) Reset() {
	*x = WalletSessionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletSessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletSessionEvent) ProtoMessage() {}

func (x *WalletSessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletSessionEvent.ProtoReflect.Descriptor instead.
func (*WalletSessionEvent) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{39}
}

func (x *WalletSessionEvent) GetEventType() WalletSessionEvent_Type {
	if x != nil {
		return x.EventType
	}
	return WalletSessionEvent_PLACEHOLDER
}

func (x *WalletSessionEvent) GetWalletIdentifier() *common.MnemonicWalletIdentity {
	if x != nil {
		return x.WalletIdentifier
	}
	return nil
}

func (x *WalletSessionEvent) GetSessionIdentifier() *WalletSessionIdentity {
	if x != nil {
		return x.SessionIdentifier
	}
	return nil
}

type SignRequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType             SignRequestEvent_Type `protobuf:"varint,1,opt,name=EventType,proto3,enum=manager_api.SignRequestEvent_Type" json:"EventType,omitempty"`
	SignRequestIdentifier *SignRequestIdentity  `protobuf:"bytes,2,opt,name=SignRequestIdentifier,proto3" json:"SignRequestIdentifier,omitempty"`
}

func (x *SignRequestEvent) Reset() {
	*x = SignRequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequestEvent) ProtoMessage() {}

func (x *SignRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_controller_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequestEvent.ProtoReflect.Descriptor instead.
func (*SignRequestEvent) Descriptor() ([]byte, []int) {
	return file_controller_api_proto_rawDescGZIP(), []int{40}
}

func (x *SignRequestEvent) GetEventType() SignRequestEvent_Type {
	if x != nil {
		return x.EventType
	}
	return SignRequestEvent_PLACEHOLDER
}

func (x *SignRequestEvent) GetSignRequestIdentifier() *SignRequestIdentity {
	if x != nil {
		return x.SignRequestIdentifier
	}
	return nil
}

var File_controller_api_proto protoreflect.FileDescriptor

var file_controller_api_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x13,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x15, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x55,
	0x49, 0x44, 0x22, 0x29, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x29, 0x0a,
	0x13, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0xa8, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0a,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x77, 0x0a, 0x09, 0x52, 0x65,
	0x71, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x90, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x53, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3d, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x13, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x9c,
	0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a,
	0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x65, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x16, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x11, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x15,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xf9, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xef, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xbb, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x62, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x67, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xda, 0x02, 0x0a, 0x1a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x83, 0x02, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a,
	0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x02, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd4,
	0x02, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a,
	0x15, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15,
	0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x15,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x02, 0x22, 0xa8, 0x02, 0x0a, 0x12, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x10,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x22, 0xdf, 0x01, 0x0a,
	0x10, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x82,
	0x01, 0x0a, 0x13, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x02, 0x32, 0x92, 0x0c, 0x0a, 0x15, 0x48, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0x55, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x20, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64,
	0x64, 0x4e, 0x65, 0x77, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x22,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2d, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x62, 0x63, 0x2d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x68, 0x64, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_api_proto_rawDescOnce sync.Once
	file_controller_api_proto_rawDescData = file_controller_api_proto_rawDesc
)

func file_controller_api_proto_rawDescGZIP() []byte {
	file_controller_api_proto_rawDescOnce.Do(func() {
		file_controller_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_api_proto_rawDescData)
	})
	return file_controller_api_proto_rawDescData
}

var file_controller_api_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_controller_api_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_controller_api_proto_goTypes = []interface{}{
	(WalletSessionStatus)(0),              // 0: manager_api.WalletSessionStatus
	(SignRequestData_ReqStatus)(0),        // 1: manager_api.SignRequestData.ReqStatus
	(Event_Type)(0),                       // 2: manager_api.Event.Type
	(WalletSessionEvent_Type)(0),          // 3: manager_api.WalletSessionEvent.Type
	(SignRequestEvent_Type)(0),            // 4: manager_api.SignRequestEvent.Type
	(*AppInstanceIdentity)(nil),           // 5: manager_api.AppInstanceIdentity
	(*WalletSessionIdentity)(nil),         // 6: manager_api.WalletSessionIdentity
	(*SignRequestIdentity)(nil),           // 7: manager_api.SignRequestIdentity
	(*SignPurposeIdentity)(nil),           // 8: manager_api.SignPurposeIdentity
	(*SignRequestData)(nil),               // 9: manager_api.SignRequestData
	(*GetEnabledWalletsRequest)(nil),      // 10: manager_api.GetEnabledWalletsRequest
	(*GetEnabledWalletsResponse)(nil),     // 11: manager_api.GetEnabledWalletsResponse
	(*AddNewWalletRequest)(nil),           // 12: manager_api.AddNewWalletRequest
	(*AddNewWalletResponse)(nil),          // 13: manager_api.AddNewWalletResponse
	(*ImportWalletRequest)(nil),           // 14: manager_api.ImportWalletRequest
	(*ImportWalletResponse)(nil),          // 15: manager_api.ImportWalletResponse
	(*EnableWalletRequest)(nil),           // 16: manager_api.EnableWalletRequest
	(*EnableWalletResponse)(nil),          // 17: manager_api.EnableWalletResponse
	(*DisableWalletRequest)(nil),          // 18: manager_api.DisableWalletRequest
	(*DisableWalletResponse)(nil),         // 19: manager_api.DisableWalletResponse
	(*DisableWalletsRequest)(nil),         // 20: manager_api.DisableWalletsRequest
	(*DisableWalletsResponse)(nil),        // 21: manager_api.DisableWalletsResponse
	(*EnableWalletsRequest)(nil),          // 22: manager_api.EnableWalletsRequest
	(*EnableWalletsResponse)(nil),         // 23: manager_api.EnableWalletsResponse
	(*GetAccountRequest)(nil),             // 24: manager_api.GetAccountRequest
	(*GetAccountResponse)(nil),            // 25: manager_api.GetAccountResponse
	(*GetMultipleAccountRequest)(nil),     // 26: manager_api.GetMultipleAccountRequest
	(*GetMultipleAccountResponse)(nil),    // 27: manager_api.GetMultipleAccountResponse
	(*GetWalletInfoRequest)(nil),          // 28: manager_api.GetWalletInfoRequest
	(*GetWalletInfoResponse)(nil),         // 29: manager_api.GetWalletInfoResponse
	(*StartWalletSessionRequest)(nil),     // 30: manager_api.StartWalletSessionRequest
	(*StartWalletSessionResponse)(nil),    // 31: manager_api.StartWalletSessionResponse
	(*GetWalletSessionRequest)(nil),       // 32: manager_api.GetWalletSessionRequest
	(*GetWalletSessionResponse)(nil),      // 33: manager_api.GetWalletSessionResponse
	(*GetWalletSessionsRequest)(nil),      // 34: manager_api.GetWalletSessionsRequest
	(*SessionInfo)(nil),                   // 35: manager_api.SessionInfo
	(*GetWalletSessionsResponse)(nil),     // 36: manager_api.GetWalletSessionsResponse
	(*CloseWalletSessionsRequest)(nil),    // 37: manager_api.CloseWalletSessionsRequest
	(*CloseWalletSessionsResponse)(nil),   // 38: manager_api.CloseWalletSessionsResponse
	(*ExecuteSignRequestReq)(nil),         // 39: manager_api.ExecuteSignRequestReq
	(*ExecuteSignRequestResponse)(nil),    // 40: manager_api.ExecuteSignRequestResponse
	(*PrepareSignRequestReq)(nil),         // 41: manager_api.PrepareSignRequestReq
	(*PrepareSignRequestResponse)(nil),    // 42: manager_api.PrepareSignRequestResponse
	(*Event)(nil),                         // 43: manager_api.Event
	(*WalletSessionEvent)(nil),            // 44: manager_api.WalletSessionEvent
	(*SignRequestEvent)(nil),              // 45: manager_api.SignRequestEvent
	nil,                                   // 46: manager_api.GetEnabledWalletsResponse.BookmarksEntry
	nil,                                   // 47: manager_api.DisableWalletsResponse.BookmarksEntry
	nil,                                   // 48: manager_api.EnableWalletsResponse.BookmarksEntry
	(*common.MnemonicWalletData)(nil),     // 49: common.MnemonicWalletData
	(*common.MnemonicWalletIdentity)(nil), // 50: common.MnemonicWalletIdentity
	(common.WalletStatus)(0),              // 51: common.WalletStatus
	(*common.AccountIdentity)(nil),        // 52: common.AccountIdentity
	(*anypb.Any)(nil),                     // 53: google.protobuf.Any
}
var file_controller_api_proto_depIdxs = []int32{
	7,  // 0: manager_api.SignRequestData.Identifier:type_name -> manager_api.SignRequestIdentity
	1,  // 1: manager_api.SignRequestData.Status:type_name -> manager_api.SignRequestData.ReqStatus
	49, // 2: manager_api.GetEnabledWalletsResponse.WalletsData:type_name -> common.MnemonicWalletData
	46, // 3: manager_api.GetEnabledWalletsResponse.Bookmarks:type_name -> manager_api.GetEnabledWalletsResponse.BookmarksEntry
	50, // 4: manager_api.AddNewWalletResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	51, // 5: manager_api.AddNewWalletResponse.WalletStatus:type_name -> common.WalletStatus
	50, // 6: manager_api.ImportWalletResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	50, // 7: manager_api.EnableWalletRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	50, // 8: manager_api.EnableWalletResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	51, // 9: manager_api.EnableWalletResponse.WalletStatus:type_name -> common.WalletStatus
	50, // 10: manager_api.DisableWalletRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	50, // 11: manager_api.DisableWalletResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	51, // 12: manager_api.DisableWalletResponse.WalletStatus:type_name -> common.WalletStatus
	50, // 13: manager_api.DisableWalletsRequest.WalletIdentifiers:type_name -> common.MnemonicWalletIdentity
	49, // 14: manager_api.DisableWalletsResponse.WalletsData:type_name -> common.MnemonicWalletData
	47, // 15: manager_api.DisableWalletsResponse.Bookmarks:type_name -> manager_api.DisableWalletsResponse.BookmarksEntry
	50, // 16: manager_api.EnableWalletsRequest.WalletIdentifiers:type_name -> common.MnemonicWalletIdentity
	49, // 17: manager_api.EnableWalletsResponse.WalletsData:type_name -> common.MnemonicWalletData
	48, // 18: manager_api.EnableWalletsResponse.Bookmarks:type_name -> manager_api.EnableWalletsResponse.BookmarksEntry
	50, // 19: manager_api.GetAccountRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 20: manager_api.GetAccountRequest.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	52, // 21: manager_api.GetAccountRequest.AccountIdentifier:type_name -> common.AccountIdentity
	50, // 22: manager_api.GetAccountResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 23: manager_api.GetAccountResponse.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	52, // 24: manager_api.GetAccountResponse.AccountIdentifier:type_name -> common.AccountIdentity
	50, // 25: manager_api.GetMultipleAccountRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 26: manager_api.GetMultipleAccountRequest.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	53, // 27: manager_api.GetMultipleAccountRequest.Parameters:type_name -> google.protobuf.Any
	50, // 28: manager_api.GetMultipleAccountResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 29: manager_api.GetMultipleAccountResponse.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	52, // 30: manager_api.GetMultipleAccountResponse.AccountIdentifiers:type_name -> common.AccountIdentity
	50, // 31: manager_api.GetWalletInfoRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	50, // 32: manager_api.GetWalletInfoResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	51, // 33: manager_api.GetWalletInfoResponse.WalletStatus:type_name -> common.WalletStatus
	50, // 34: manager_api.StartWalletSessionRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	50, // 35: manager_api.StartWalletSessionResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 36: manager_api.StartWalletSessionResponse.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	0,  // 37: manager_api.StartWalletSessionResponse.SessionStatus:type_name -> manager_api.WalletSessionStatus
	50, // 38: manager_api.GetWalletSessionRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 39: manager_api.GetWalletSessionRequest.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	50, // 40: manager_api.GetWalletSessionResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	35, // 41: manager_api.GetWalletSessionResponse.Session:type_name -> manager_api.SessionInfo
	50, // 42: manager_api.GetWalletSessionsRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 43: manager_api.SessionInfo.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	0,  // 44: manager_api.SessionInfo.SessionStatus:type_name -> manager_api.WalletSessionStatus
	50, // 45: manager_api.GetWalletSessionsResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	35, // 46: manager_api.GetWalletSessionsResponse.ActiveSessions:type_name -> manager_api.SessionInfo
	50, // 47: manager_api.CloseWalletSessionsRequest.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 48: manager_api.CloseWalletSessionsRequest.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	50, // 49: manager_api.CloseWalletSessionsResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 50: manager_api.CloseWalletSessionsResponse.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	0,  // 51: manager_api.CloseWalletSessionsResponse.SessionStatus:type_name -> manager_api.WalletSessionStatus
	50, // 52: manager_api.ExecuteSignRequestReq.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	52, // 53: manager_api.ExecuteSignRequestReq.AccountIdentifier:type_name -> common.AccountIdentity
	6,  // 54: manager_api.ExecuteSignRequestReq.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	7,  // 55: manager_api.ExecuteSignRequestReq.SignRequestIdentifier:type_name -> manager_api.SignRequestIdentity
	50, // 56: manager_api.ExecuteSignRequestResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 57: manager_api.ExecuteSignRequestResponse.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	52, // 58: manager_api.ExecuteSignRequestResponse.AccountIdentifier:type_name -> common.AccountIdentity
	9,  // 59: manager_api.ExecuteSignRequestResponse.SignatureRequestInfo:type_name -> manager_api.SignRequestData
	50, // 60: manager_api.PrepareSignRequestReq.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	52, // 61: manager_api.PrepareSignRequestReq.AccountIdentifier:type_name -> common.AccountIdentity
	6,  // 62: manager_api.PrepareSignRequestReq.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	8,  // 63: manager_api.PrepareSignRequestReq.SignPurposeIdentifier:type_name -> manager_api.SignPurposeIdentity
	50, // 64: manager_api.PrepareSignRequestResponse.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 65: manager_api.PrepareSignRequestResponse.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	52, // 66: manager_api.PrepareSignRequestResponse.AccountIdentifier:type_name -> common.AccountIdentity
	9,  // 67: manager_api.PrepareSignRequestResponse.SignatureRequestInfo:type_name -> manager_api.SignRequestData
	2,  // 68: manager_api.Event.EventType:type_name -> manager_api.Event.Type
	5,  // 69: manager_api.Event.AppInstanceIdentifier:type_name -> manager_api.AppInstanceIdentity
	3,  // 70: manager_api.WalletSessionEvent.EventType:type_name -> manager_api.WalletSessionEvent.Type
	50, // 71: manager_api.WalletSessionEvent.WalletIdentifier:type_name -> common.MnemonicWalletIdentity
	6,  // 72: manager_api.WalletSessionEvent.SessionIdentifier:type_name -> manager_api.WalletSessionIdentity
	4,  // 73: manager_api.SignRequestEvent.EventType:type_name -> manager_api.SignRequestEvent.Type
	7,  // 74: manager_api.SignRequestEvent.SignRequestIdentifier:type_name -> manager_api.SignRequestIdentity
	12, // 75: manager_api.HdWalletControllerApi.AddNewWallet:input_type -> manager_api.AddNewWalletRequest
	14, // 76: manager_api.HdWalletControllerApi.ImportWallet:input_type -> manager_api.ImportWalletRequest
	16, // 77: manager_api.HdWalletControllerApi.EnableWallet:input_type -> manager_api.EnableWalletRequest
	28, // 78: manager_api.HdWalletControllerApi.GetWalletInfo:input_type -> manager_api.GetWalletInfoRequest
	10, // 79: manager_api.HdWalletControllerApi.GetEnabledWallets:input_type -> manager_api.GetEnabledWalletsRequest
	18, // 80: manager_api.HdWalletControllerApi.DisableWallet:input_type -> manager_api.DisableWalletRequest
	20, // 81: manager_api.HdWalletControllerApi.DisableWallets:input_type -> manager_api.DisableWalletsRequest
	22, // 82: manager_api.HdWalletControllerApi.EnableWallets:input_type -> manager_api.EnableWalletsRequest
	30, // 83: manager_api.HdWalletControllerApi.StartWalletSession:input_type -> manager_api.StartWalletSessionRequest
	32, // 84: manager_api.HdWalletControllerApi.GetWalletSession:input_type -> manager_api.GetWalletSessionRequest
	34, // 85: manager_api.HdWalletControllerApi.GetAllWalletSessions:input_type -> manager_api.GetWalletSessionsRequest
	37, // 86: manager_api.HdWalletControllerApi.CloseWalletSession:input_type -> manager_api.CloseWalletSessionsRequest
	24, // 87: manager_api.HdWalletControllerApi.GetAccount:input_type -> manager_api.GetAccountRequest
	26, // 88: manager_api.HdWalletControllerApi.GetMultipleAccounts:input_type -> manager_api.GetMultipleAccountRequest
	41, // 89: manager_api.HdWalletControllerApi.PrepareSignRequest:input_type -> manager_api.PrepareSignRequestReq
	39, // 90: manager_api.HdWalletControllerApi.ExecuteSignRequest:input_type -> manager_api.ExecuteSignRequestReq
	13, // 91: manager_api.HdWalletControllerApi.AddNewWallet:output_type -> manager_api.AddNewWalletResponse
	15, // 92: manager_api.HdWalletControllerApi.ImportWallet:output_type -> manager_api.ImportWalletResponse
	17, // 93: manager_api.HdWalletControllerApi.EnableWallet:output_type -> manager_api.EnableWalletResponse
	29, // 94: manager_api.HdWalletControllerApi.GetWalletInfo:output_type -> manager_api.GetWalletInfoResponse
	11, // 95: manager_api.HdWalletControllerApi.GetEnabledWallets:output_type -> manager_api.GetEnabledWalletsResponse
	19, // 96: manager_api.HdWalletControllerApi.DisableWallet:output_type -> manager_api.DisableWalletResponse
	21, // 97: manager_api.HdWalletControllerApi.DisableWallets:output_type -> manager_api.DisableWalletsResponse
	23, // 98: manager_api.HdWalletControllerApi.EnableWallets:output_type -> manager_api.EnableWalletsResponse
	31, // 99: manager_api.HdWalletControllerApi.StartWalletSession:output_type -> manager_api.StartWalletSessionResponse
	33, // 100: manager_api.HdWalletControllerApi.GetWalletSession:output_type -> manager_api.GetWalletSessionResponse
	36, // 101: manager_api.HdWalletControllerApi.GetAllWalletSessions:output_type -> manager_api.GetWalletSessionsResponse
	38, // 102: manager_api.HdWalletControllerApi.CloseWalletSession:output_type -> manager_api.CloseWalletSessionsResponse
	25, // 103: manager_api.HdWalletControllerApi.GetAccount:output_type -> manager_api.GetAccountResponse
	27, // 104: manager_api.HdWalletControllerApi.GetMultipleAccounts:output_type -> manager_api.GetMultipleAccountResponse
	42, // 105: manager_api.HdWalletControllerApi.PrepareSignRequest:output_type -> manager_api.PrepareSignRequestResponse
	40, // 106: manager_api.HdWalletControllerApi.ExecuteSignRequest:output_type -> manager_api.ExecuteSignRequestResponse
	91, // [91:107] is the sub-list for method output_type
	75, // [75:91] is the sub-list for method input_type
	75, // [75:75] is the sub-list for extension type_name
	75, // [75:75] is the sub-list for extension extendee
	0,  // [0:75] is the sub-list for field type_name
}

func init() { file_controller_api_proto_init() }
func file_controller_api_proto_init() {
	if File_controller_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInstanceIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletSessionIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequestIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignPurposeIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnabledWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnabledWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMultipleAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMultipleAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWalletSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWalletSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseWalletSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseWalletSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSignRequestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSignRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSignRequestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSignRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletSessionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_api_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_api_proto_goTypes,
		DependencyIndexes: file_controller_api_proto_depIdxs,
		EnumInfos:         file_controller_api_proto_enumTypes,
		MessageInfos:      file_controller_api_proto_msgTypes,
	}.Build()
	File_controller_api_proto = out.File
	file_controller_api_proto_rawDesc = nil
	file_controller_api_proto_goTypes = nil
	file_controller_api_proto_depIdxs = nil
}
